<?php
/**
 * CampaignApi
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2022_07
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2022-07
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\v2022_07\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\retailmedia\v2022_07\ApiException;
use criteo\api\retailmedia\v2022_07\Configuration;
use criteo\api\retailmedia\v2022_07\HeaderSelector;
use criteo\api\retailmedia\v2022_07\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2022_07
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAsset
     *
     * @param  \SplFileObject $asset_file The asset binary content (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AssetResponse
     */
    public function createAsset($asset_file)
    {
        list($response) = $this->createAssetWithHttpInfo($asset_file);
        return $response;
    }

    /**
     * Operation createAssetWithHttpInfo
     *
     * @param  \SplFileObject $asset_file The asset binary content (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AssetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetWithHttpInfo($asset_file)
    {
        $request = $this->createAssetRequest($asset_file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AssetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AssetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AssetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AssetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssetAsync
     *
     * @param  \SplFileObject $asset_file The asset binary content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetAsync($asset_file)
    {
        return $this->createAssetAsyncWithHttpInfo($asset_file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssetAsyncWithHttpInfo
     *
     * @param  \SplFileObject $asset_file The asset binary content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetAsyncWithHttpInfo($asset_file)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AssetResponse';
        $request = $this->createAssetRequest($asset_file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAsset'
     *
     * @param  \SplFileObject $asset_file The asset binary content (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAssetRequest($asset_file)
    {
        // verify the required parameter 'asset_file' is set
        if ($asset_file === null || (is_array($asset_file) && count($asset_file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $asset_file when calling createAsset'
            );
        }

        $resourcePath = '/2022-07/retail-media/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($asset_file !== null) {
            $formParams['AssetFile'] = ObjectSerializer::toFormValue($asset_file);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalAccountBalancesByAccountId
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse
     */
    public function getApi202110ExternalAccountBalancesByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApi202110ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApi202110ExternalAccountBalancesByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApi202110ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalAccountBalancesByAccountIdAsync
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAccountBalancesByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApi202110ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalAccountBalancesByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\Balance202110PagedListResponse';
        $request = $this->getApi202110ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalAccountBalancesByAccountId'
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApi202110ExternalAccountBalancesByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{account-id}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalAccountCreativesByAccountId
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse
     */
    public function getApi202110ExternalAccountCreativesByAccountId($account_id)
    {
        list($response) = $this->getApi202110ExternalAccountCreativesByAccountIdWithHttpInfo($account_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalAccountCreativesByAccountIdWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalAccountCreativesByAccountIdWithHttpInfo($account_id)
    {
        $request = $this->getApi202110ExternalAccountCreativesByAccountIdRequest($account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalAccountCreativesByAccountIdAsync
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAccountCreativesByAccountIdAsync($account_id)
    {
        return $this->getApi202110ExternalAccountCreativesByAccountIdAsyncWithHttpInfo($account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalAccountCreativesByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAccountCreativesByAccountIdAsyncWithHttpInfo($account_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\Creative202110ListResponse';
        $request = $this->getApi202110ExternalAccountCreativesByAccountIdRequest($account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalAccountCreativesByAccountId'
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalAccountCreativesByAccountIdRequest($account_id)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApi202110ExternalAccountCreativesByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{account-id}/creatives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response
     */
    public function getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId($line_item_id)
    {
        list($response) = $this->getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsync($line_item_id)
    {
        return $this->getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
        $request = $this->getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalAuctionLineItemTargetingKeywordsByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse
     */
    public function getApi202110ExternalBalanceCampaignsByBalanceId($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApi202110ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApi202110ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApi202110ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApi202110ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
        $request = $this->getApi202110ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling getApi202110ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/2022-07/retail-media/balances/{balance-id}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balance-id' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalCampaignPreferredLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse
     */
    public function getApi202110ExternalCampaignPreferredLineItemsByCampaignId($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110PagedListResponse';
        $request = $this->getApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalCampaignPreferredLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApi202110ExternalCampaignPreferredLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaign-id}/preferred-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse
     */
    public function getApi202110ExternalLineItemProductsByLineItemId($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApi202110ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApi202110ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApi202110ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalLineItemProductsByLineItemIdAsync($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApi202110ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
        $request = $this->getApi202110ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response
     */
    public function getApi202110ExternalPreferredLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApi202110ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApi202110ExternalPreferredLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApi202110ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response';
        $request = $this->getApi202110ExternalPreferredLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalPreferredLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalPreferredLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalPreferredLineItemByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response
     */
    public function getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId($line_item_id)
    {
        list($response) = $this->getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync($line_item_id)
    {
        return $this->getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
        $request = $this->getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response
     */
    public function getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId($line_item_id)
    {
        list($response) = $this->getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync($line_item_id)
    {
        return $this->getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
        $request = $this->getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response
     */
    public function getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId($line_item_id)
    {
        list($response) = $this->getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync($line_item_id)
    {
        return $this->getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
        $request = $this->getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202110ExternalPreferredLineItemTargetingStoresByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202110ExternalRetailerPagesByRetailerId
     *
     * @param  int $retailer_id The retailers to fetch pages for (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110
     */
    public function getApi202110ExternalRetailerPagesByRetailerId($retailer_id)
    {
        list($response) = $this->getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo($retailer_id);
        return $response;
    }

    /**
     * Operation getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo
     *
     * @param  int $retailer_id The retailers to fetch pages for (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202110ExternalRetailerPagesByRetailerIdWithHttpInfo($retailer_id)
    {
        $request = $this->getApi202110ExternalRetailerPagesByRetailerIdRequest($retailer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202110ExternalRetailerPagesByRetailerIdAsync
     *
     * @param  int $retailer_id The retailers to fetch pages for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalRetailerPagesByRetailerIdAsync($retailer_id)
    {
        return $this->getApi202110ExternalRetailerPagesByRetailerIdAsyncWithHttpInfo($retailer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202110ExternalRetailerPagesByRetailerIdAsyncWithHttpInfo
     *
     * @param  int $retailer_id The retailers to fetch pages for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202110ExternalRetailerPagesByRetailerIdAsyncWithHttpInfo($retailer_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\ExternalRetailerPages202110';
        $request = $this->getApi202110ExternalRetailerPagesByRetailerIdRequest($retailer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202110ExternalRetailerPagesByRetailerId'
     *
     * @param  int $retailer_id The retailers to fetch pages for (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202110ExternalRetailerPagesByRetailerIdRequest($retailer_id)
    {
        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApi202110ExternalRetailerPagesByRetailerId'
            );
        }

        $resourcePath = '/2022-07/retail-media/retailers/{retailerId}/pages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailerId' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202204ExternalCategorieByCategoryId
     *
     * @param  int $category_id ID of the desired category (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\Category202204
     */
    public function getApi202204ExternalCategorieByCategoryId($category_id)
    {
        list($response) = $this->getApi202204ExternalCategorieByCategoryIdWithHttpInfo($category_id);
        return $response;
    }

    /**
     * Operation getApi202204ExternalCategorieByCategoryIdWithHttpInfo
     *
     * @param  int $category_id ID of the desired category (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\Category202204, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202204ExternalCategorieByCategoryIdWithHttpInfo($category_id)
    {
        $request = $this->getApi202204ExternalCategorieByCategoryIdRequest($category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\Category202204' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\Category202204', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\Category202204';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\Category202204',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202204ExternalCategorieByCategoryIdAsync
     *
     * @param  int $category_id ID of the desired category (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202204ExternalCategorieByCategoryIdAsync($category_id)
    {
        return $this->getApi202204ExternalCategorieByCategoryIdAsyncWithHttpInfo($category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202204ExternalCategorieByCategoryIdAsyncWithHttpInfo
     *
     * @param  int $category_id ID of the desired category (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202204ExternalCategorieByCategoryIdAsyncWithHttpInfo($category_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\Category202204';
        $request = $this->getApi202204ExternalCategorieByCategoryIdRequest($category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202204ExternalCategorieByCategoryId'
     *
     * @param  int $category_id ID of the desired category (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202204ExternalCategorieByCategoryIdRequest($category_id)
    {
        // verify the required parameter 'category_id' is set
        if ($category_id === null || (is_array($category_id) && count($category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $category_id when calling getApi202204ExternalCategorieByCategoryId'
            );
        }

        $resourcePath = '/2022-07/retail-media/categories/{categoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'categoryId' . '}',
                ObjectSerializer::toPathValue($category_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202204ExternalCategories
     *
     * @param  int $retailer_id The retailer id for which Categories fetched (optional)
     * @param  string $text_substring Query string to search across Categories (optional)
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse
     */
    public function getApi202204ExternalCategories($retailer_id = null, $text_substring = null, $page_index = 0, $page_size = 100)
    {
        list($response) = $this->getApi202204ExternalCategoriesWithHttpInfo($retailer_id, $text_substring, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApi202204ExternalCategoriesWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which Categories fetched (optional)
     * @param  string $text_substring Query string to search across Categories (optional)
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202204ExternalCategoriesWithHttpInfo($retailer_id = null, $text_substring = null, $page_index = 0, $page_size = 100)
    {
        $request = $this->getApi202204ExternalCategoriesRequest($retailer_id, $text_substring, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202204ExternalCategoriesAsync
     *
     * @param  int $retailer_id The retailer id for which Categories fetched (optional)
     * @param  string $text_substring Query string to search across Categories (optional)
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202204ExternalCategoriesAsync($retailer_id = null, $text_substring = null, $page_index = 0, $page_size = 100)
    {
        return $this->getApi202204ExternalCategoriesAsyncWithHttpInfo($retailer_id, $text_substring, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202204ExternalCategoriesAsyncWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which Categories fetched (optional)
     * @param  string $text_substring Query string to search across Categories (optional)
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202204ExternalCategoriesAsyncWithHttpInfo($retailer_id = null, $text_substring = null, $page_index = 0, $page_size = 100)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\Category202204ListResponse';
        $request = $this->getApi202204ExternalCategoriesRequest($retailer_id, $text_substring, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202204ExternalCategories'
     *
     * @param  int $retailer_id The retailer id for which Categories fetched (optional)
     * @param  string $text_substring Query string to search across Categories (optional)
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202204ExternalCategoriesRequest($retailer_id = null, $text_substring = null, $page_index = 0, $page_size = 100)
    {
        if ($page_index !== null && $page_index > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.getApi202204ExternalCategories, must be smaller than or equal to 500.');
        }
        if ($page_index !== null && $page_index < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.getApi202204ExternalCategories, must be bigger than or equal to 0.');
        }

        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.getApi202204ExternalCategories, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.getApi202204ExternalCategories, must be bigger than or equal to 1.');
        }


        $resourcePath = '/2022-07/retail-media/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($retailer_id !== null) {
            if('form' === 'form' && is_array($retailer_id)) {
                foreach($retailer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['retailerId'] = $retailer_id;
            }
        }
        // query params
        if ($text_substring !== null) {
            if('form' === 'form' && is_array($text_substring)) {
                foreach($text_substring as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['textSubstring'] = $text_substring;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand
     */
    public function getApiV1ExternalAccountBrandsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfBrand';
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBrandsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBrandsByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{accountId}/brands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign
     */
    public function getApiV1ExternalAccountCampaignsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfCampaign';
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer
     */
    public function getApiV1ExternalAccountRetailersByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfRetailer';
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountRetailersByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountRetailersByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{accountId}/retailers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccounts
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount
     */
    public function getApiV1ExternalAccounts($limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountsWithHttpInfo($limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountsWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountsWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountsAsync
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsync($limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountsAsyncWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiPageResponseOfAccount';
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccounts'
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountsRequest($limit_to_id = null, $page_index = null, $page_size = null)
    {

        $resourcePath = '/2022-07/retail-media/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function getApiV1ExternalCampaignByCampaignId($campaign_id)
    {
        list($response) = $this->getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id)
    {
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsync($campaign_id)
    {
        return $this->getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCampaignByCampaignIdRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getApiV1ExternalCatalogOutputByCatalogId($catalog_id)
    {
        $this->getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id);
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '';
        $request = $this->getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCatalogOutputByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV1ExternalCatalogOutputByCatalogId'
            );
        }

        $resourcePath = '/2022-07/retail-media/catalogs/{catalogId}/output';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-json-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-json-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function getApiV1ExternalCatalogStatusByCatalogId($catalog_id)
    {
        list($response) = $this->getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCatalogStatusByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV1ExternalCatalogStatusByCatalogId'
            );
        }

        $resourcePath = '/2022-07/retail-media/catalogs/{catalogId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse
     */
    public function getApiV2ExternalAccountLineItemsByAccountId($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdAsync($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemPagedListResponse';
        $request = $this->getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalAccountLineItemsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV2ExternalAccountLineItemsByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{account-id}/line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_campaign_id !== null) {
            if('form' === 'form' && is_array($limit_to_campaign_id)) {
                foreach($limit_to_campaign_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToCampaignId'] = $limit_to_campaign_id;
            }
        }
        // query params
        if ($limit_to_type !== null) {
            if('form' === 'form' && is_array($limit_to_type)) {
                foreach($limit_to_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToType'] = $limit_to_type;
            }
        }
        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse
     */
    public function getApiV2ExternalAuctionLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
        $request = $this->getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalAuctionLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalAuctionLineItemByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/auction-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignId($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemPagedListResponse';
        $request = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalCampaignAuctionLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV2ExternalCampaignAuctionLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaign-id}/auction-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse
     */
    public function getApiV2ExternalLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\CommonLineItemResponse';
        $request = $this->getApiV2ExternalLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalLineItemByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request keyword_target202110_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId($line_item_id, $keyword_target202110_request = null)
    {
        list($response) = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdWithHttpInfo($line_item_id, $keyword_target202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdWithHttpInfo($line_item_id, $keyword_target202110_request = null)
    {
        $request = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdRequest($line_item_id, $keyword_target202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsync($line_item_id, $keyword_target202110_request = null)
    {
        return $this->postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
        $request = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdRequest($line_item_id, $keyword_target202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemIdRequest($line_item_id, $keyword_target202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalAuctionLineItemTargetingKeywordsAppendByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($keyword_target202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($keyword_target202110_request));
            } else {
                $httpBody = $keyword_target202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request keyword_target202110_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId($line_item_id, $keyword_target202110_request = null)
    {
        list($response) = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdWithHttpInfo($line_item_id, $keyword_target202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdWithHttpInfo($line_item_id, $keyword_target202110_request = null)
    {
        $request = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdRequest($line_item_id, $keyword_target202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsync($line_item_id, $keyword_target202110_request = null)
    {
        return $this->postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Response';
        $request = $this->postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdRequest($line_item_id, $keyword_target202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\KeywordTarget202110Request $keyword_target202110_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemIdRequest($line_item_id, $keyword_target202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalAuctionLineItemTargetingKeywordsDeleteByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/auction-line-items/{line-item-id}/targeting/keywords/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($keyword_target202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($keyword_target202110_request));
            } else {
                $httpBody = $keyword_target202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsAppendByBalanceId
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse
     */
    public function postApi202110ExternalBalanceCampaignsAppendByBalanceId($balance_id, $balance_campaign202110_list_request = null)
    {
        list($response) = $this->postApi202110ExternalBalanceCampaignsAppendByBalanceIdWithHttpInfo($balance_id, $balance_campaign202110_list_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsAppendByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalBalanceCampaignsAppendByBalanceIdWithHttpInfo($balance_id, $balance_campaign202110_list_request = null)
    {
        $request = $this->postApi202110ExternalBalanceCampaignsAppendByBalanceIdRequest($balance_id, $balance_campaign202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsync
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsync($balance_id, $balance_campaign202110_list_request = null)
    {
        return $this->postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsyncWithHttpInfo($balance_id, $balance_campaign202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalBalanceCampaignsAppendByBalanceIdAsyncWithHttpInfo($balance_id, $balance_campaign202110_list_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
        $request = $this->postApi202110ExternalBalanceCampaignsAppendByBalanceIdRequest($balance_id, $balance_campaign202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalBalanceCampaignsAppendByBalanceId'
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalBalanceCampaignsAppendByBalanceIdRequest($balance_id, $balance_campaign202110_list_request = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling postApi202110ExternalBalanceCampaignsAppendByBalanceId'
            );
        }

        $resourcePath = '/2022-07/retail-media/balances/{balance-id}/campaigns/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balance-id' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($balance_campaign202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($balance_campaign202110_list_request));
            } else {
                $httpBody = $balance_campaign202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsDeleteByBalanceId
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse
     */
    public function postApi202110ExternalBalanceCampaignsDeleteByBalanceId($balance_id, $balance_campaign202110_list_request = null)
    {
        list($response) = $this->postApi202110ExternalBalanceCampaignsDeleteByBalanceIdWithHttpInfo($balance_id, $balance_campaign202110_list_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsDeleteByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalBalanceCampaignsDeleteByBalanceIdWithHttpInfo($balance_id, $balance_campaign202110_list_request = null)
    {
        $request = $this->postApi202110ExternalBalanceCampaignsDeleteByBalanceIdRequest($balance_id, $balance_campaign202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsync
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsync($balance_id, $balance_campaign202110_list_request = null)
    {
        return $this->postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsyncWithHttpInfo($balance_id, $balance_campaign202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalBalanceCampaignsDeleteByBalanceIdAsyncWithHttpInfo($balance_id, $balance_campaign202110_list_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110PagedListResponse';
        $request = $this->postApi202110ExternalBalanceCampaignsDeleteByBalanceIdRequest($balance_id, $balance_campaign202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalBalanceCampaignsDeleteByBalanceId'
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\BalanceCampaign202110ListRequest $balance_campaign202110_list_request The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalBalanceCampaignsDeleteByBalanceIdRequest($balance_id, $balance_campaign202110_list_request = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling postApi202110ExternalBalanceCampaignsDeleteByBalanceId'
            );
        }

        $resourcePath = '/2022-07/retail-media/balances/{balance-id}/campaigns/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balance-id' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($balance_campaign202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($balance_campaign202110_list_request));
            } else {
                $httpBody = $balance_campaign202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalCampaignPreferredLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemCreateModel202110Request $preferred_line_item_create_model202110_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response
     */
    public function postApi202110ExternalCampaignPreferredLineItemsByCampaignId($campaign_id, $preferred_line_item_create_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $preferred_line_item_create_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemCreateModel202110Request $preferred_line_item_create_model202110_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $preferred_line_item_create_model202110_request = null)
    {
        $request = $this->postApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemCreateModel202110Request $preferred_line_item_create_model202110_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsync($campaign_id, $preferred_line_item_create_model202110_request = null)
    {
        return $this->postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $preferred_line_item_create_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemCreateModel202110Request $preferred_line_item_create_model202110_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $preferred_line_item_create_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItem202110Response';
        $request = $this->postApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalCampaignPreferredLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemCreateModel202110Request $preferred_line_item_create_model202110_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model202110_request = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postApi202110ExternalCampaignPreferredLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaign-id}/preferred-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($preferred_line_item_create_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($preferred_line_item_create_model202110_request));
            } else {
                $httpBody = $preferred_line_item_create_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsAppendByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse
     */
    public function postApi202110ExternalLineItemProductsAppendByLineItemId($line_item_id, $promoted_product202110_list_request = null)
    {
        list($response) = $this->postApi202110ExternalLineItemProductsAppendByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalLineItemProductsAppendByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalLineItemProductsAppendByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $request = $this->postApi202110ExternalLineItemProductsAppendByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalLineItemProductsAppendByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsAppendByLineItemIdAsync($line_item_id, $promoted_product202110_list_request = null)
    {
        return $this->postApi202110ExternalLineItemProductsAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsAppendByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
        $request = $this->postApi202110ExternalLineItemProductsAppendByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalLineItemProductsAppendByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalLineItemProductsAppendByLineItemIdRequest($line_item_id, $promoted_product202110_list_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalLineItemProductsAppendByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}/products/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($promoted_product202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($promoted_product202110_list_request));
            } else {
                $httpBody = $promoted_product202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsDeleteByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request promoted_product202110_list_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse
     */
    public function postApi202110ExternalLineItemProductsDeleteByLineItemId($line_item_id, $promoted_product202110_list_request = null)
    {
        list($response) = $this->postApi202110ExternalLineItemProductsDeleteByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalLineItemProductsDeleteByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalLineItemProductsDeleteByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $request = $this->postApi202110ExternalLineItemProductsDeleteByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalLineItemProductsDeleteByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsDeleteByLineItemIdAsync($line_item_id, $promoted_product202110_list_request = null)
    {
        return $this->postApi202110ExternalLineItemProductsDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsDeleteByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110PagedListResponse';
        $request = $this->postApi202110ExternalLineItemProductsDeleteByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalLineItemProductsDeleteByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalLineItemProductsDeleteByLineItemIdRequest($line_item_id, $promoted_product202110_list_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalLineItemProductsDeleteByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}/products/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($promoted_product202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($promoted_product202110_list_request));
            } else {
                $httpBody = $promoted_product202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsPauseByLineItemId
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to pause. (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApi202110ExternalLineItemProductsPauseByLineItemId($line_item_id, $promoted_product202110_list_request = null)
    {
        $this->postApi202110ExternalLineItemProductsPauseByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request);
    }

    /**
     * Operation postApi202110ExternalLineItemProductsPauseByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to pause. (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalLineItemProductsPauseByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $request = $this->postApi202110ExternalLineItemProductsPauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalLineItemProductsPauseByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to pause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsPauseByLineItemIdAsync($line_item_id, $promoted_product202110_list_request = null)
    {
        return $this->postApi202110ExternalLineItemProductsPauseByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsPauseByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to pause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsPauseByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $returnType = '';
        $request = $this->postApi202110ExternalLineItemProductsPauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalLineItemProductsPauseByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to pause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalLineItemProductsPauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalLineItemProductsPauseByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}/products/pause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($promoted_product202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($promoted_product202110_list_request));
            } else {
                $httpBody = $promoted_product202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsUnpauseByLineItemId
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to unpause. (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApi202110ExternalLineItemProductsUnpauseByLineItemId($line_item_id, $promoted_product202110_list_request = null)
    {
        $this->postApi202110ExternalLineItemProductsUnpauseByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request);
    }

    /**
     * Operation postApi202110ExternalLineItemProductsUnpauseByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to unpause. (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalLineItemProductsUnpauseByLineItemIdWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $request = $this->postApi202110ExternalLineItemProductsUnpauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to unpause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsync($line_item_id, $promoted_product202110_list_request = null)
    {
        return $this->postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to unpause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalLineItemProductsUnpauseByLineItemIdAsyncWithHttpInfo($line_item_id, $promoted_product202110_list_request = null)
    {
        $returnType = '';
        $request = $this->postApi202110ExternalLineItemProductsUnpauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalLineItemProductsUnpauseByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PromotedProduct202110ListRequest $promoted_product202110_list_request The products from which their IDs will be used to unpause. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalLineItemProductsUnpauseByLineItemIdRequest($line_item_id, $promoted_product202110_list_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalLineItemProductsUnpauseByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/line-items/{line-item-id}/products/unpause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($promoted_product202110_list_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($promoted_product202110_list_request));
            } else {
                $httpBody = $promoted_product202110_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsync($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingAddToBasketAppendByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_to_basket_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_to_basket_ids_update_model202110_request));
            } else {
                $httpBody = $add_to_basket_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsync($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketIdsUpdateModel202110Request $add_to_basket_ids_update_model202110_request Ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemIdRequest($line_item_id, $add_to_basket_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingAddToBasketDeleteByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_to_basket_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_to_basket_ids_update_model202110_request));
            } else {
                $httpBody = $add_to_basket_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId($line_item_id, $audience_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdWithHttpInfo($line_item_id, $audience_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdWithHttpInfo($line_item_id, $audience_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsync($line_item_id, $audience_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingAudiencesAppendByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($audience_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($audience_ids_update_model202110_request));
            } else {
                $httpBody = $audience_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId($line_item_id, $audience_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdWithHttpInfo($line_item_id, $audience_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdWithHttpInfo($line_item_id, $audience_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsync($line_item_id, $audience_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceIdsUpdateModel202110Request $audience_ids_update_model202110_request Audience ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemIdRequest($line_item_id, $audience_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingAudiencesDeleteByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($audience_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($audience_ids_update_model202110_request));
            } else {
                $httpBody = $audience_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId($line_item_id, $store_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdWithHttpInfo($line_item_id, $store_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to append to the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdWithHttpInfo($line_item_id, $store_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsync($line_item_id, $store_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $store_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdAsyncWithHttpInfo($line_item_id, $store_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to append to the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingStoresAppendByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores/append';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($store_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($store_ids_update_model202110_request));
            } else {
                $httpBody = $store_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId($line_item_id, $store_ids_update_model202110_request = null)
    {
        list($response) = $this->postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdWithHttpInfo($line_item_id, $store_ids_update_model202110_request);
        return $response;
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to remove from the target (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdWithHttpInfo($line_item_id, $store_ids_update_model202110_request = null)
    {
        $request = $this->postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsync($line_item_id, $store_ids_update_model202110_request = null)
    {
        return $this->postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $store_ids_update_model202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdAsyncWithHttpInfo($line_item_id, $store_ids_update_model202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
        $request = $this->postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreIdsUpdateModel202110Request $store_ids_update_model202110_request Store ids to remove from the target (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemIdRequest($line_item_id, $store_ids_update_model202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202110ExternalPreferredLineItemTargetingStoresDeleteByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($store_ids_update_model202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($store_ids_update_model202110_request));
            } else {
                $httpBody = $store_ids_update_model202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function postApiV1ExternalAccountCampaignsByAccountId($account_id, $external_post_campaign = null)
    {
        list($response) = $this->postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign);
        return $response;
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $external_post_campaign = null)
    {
        return $this->postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_post_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_post_campaign));
            } else {
                $httpBody = $external_post_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountId
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request json_api_request_of_catalog_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function postApiV1ExternalAccountCatalogsByAccountId($account_id, $json_api_request_of_catalog_request = null)
    {
        list($response) = $this->postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request);
        return $response;
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request = null)
    {
        $request = $this->postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdAsync
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdAsync($account_id, $json_api_request_of_catalog_request = null)
    {
        return $this->postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalAccountCatalogsByAccountId'
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalAccountCatalogsByAccountId'
            );
        }

        $resourcePath = '/2022-07/retail-media/accounts/{accountId}/catalogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_request_of_catalog_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_request_of_catalog_request));
            } else {
                $httpBody = $json_api_request_of_catalog_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignId($campaign_id, $auction_line_item_create_model_request = null)
    {
        list($response) = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $auction_line_item_create_model_request);
        return $response;
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $auction_line_item_create_model_request = null)
    {
        $request = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync($campaign_id, $auction_line_item_create_model_request = null)
    {
        return $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $auction_line_item_create_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $auction_line_item_create_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
        $request = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV2ExternalCampaignAuctionLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postApiV2ExternalCampaignAuctionLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaign-id}/auction-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auction_line_item_create_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auction_line_item_create_model_request));
            } else {
                $httpBody = $auction_line_item_create_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Request $add_to_basket_target202110_request The add to basket target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response
     */
    public function putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId($line_item_id, $add_to_basket_target202110_request = null)
    {
        list($response) = $this->putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_target202110_request);
        return $response;
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Request $add_to_basket_target202110_request The add to basket target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdWithHttpInfo($line_item_id, $add_to_basket_target202110_request = null)
    {
        $request = $this->putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id, $add_to_basket_target202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Request $add_to_basket_target202110_request The add to basket target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsync($line_item_id, $add_to_basket_target202110_request = null)
    {
        return $this->putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_target202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Request $add_to_basket_target202110_request The add to basket target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdAsyncWithHttpInfo($line_item_id, $add_to_basket_target202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Response';
        $request = $this->putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id, $add_to_basket_target202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AddToBasketTarget202110Request $add_to_basket_target202110_request The add to basket target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemIdRequest($line_item_id, $add_to_basket_target202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApi202110ExternalPreferredLineItemTargetingAddToBasketByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/add-to-basket';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($add_to_basket_target202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($add_to_basket_target202110_request));
            } else {
                $httpBody = $add_to_basket_target202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Request $audience_target202110_request The audience target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response
     */
    public function putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId($line_item_id, $audience_target202110_request = null)
    {
        list($response) = $this->putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo($line_item_id, $audience_target202110_request);
        return $response;
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Request $audience_target202110_request The audience target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdWithHttpInfo($line_item_id, $audience_target202110_request = null)
    {
        $request = $this->putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id, $audience_target202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Request $audience_target202110_request The audience target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsync($line_item_id, $audience_target202110_request = null)
    {
        return $this->putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_target202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Request $audience_target202110_request The audience target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdAsyncWithHttpInfo($line_item_id, $audience_target202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Response';
        $request = $this->putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id, $audience_target202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AudienceTarget202110Request $audience_target202110_request The audience target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemIdRequest($line_item_id, $audience_target202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApi202110ExternalPreferredLineItemTargetingAudiencesByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($audience_target202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($audience_target202110_request));
            } else {
                $httpBody = $audience_target202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Request $store_target202110_request The store target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response
     */
    public function putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId($line_item_id, $store_target202110_request = null)
    {
        list($response) = $this->putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo($line_item_id, $store_target202110_request);
        return $response;
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Request $store_target202110_request The store target to set the scope for (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response|\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdWithHttpInfo($line_item_id, $store_target202110_request = null)
    {
        $request = $this->putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id, $store_target202110_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Request $store_target202110_request The store target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsync($line_item_id, $store_target202110_request = null)
    {
        return $this->putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo($line_item_id, $store_target202110_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Request $store_target202110_request The store target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdAsyncWithHttpInfo($line_item_id, $store_target202110_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Response';
        $request = $this->putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id, $store_target202110_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\StoreTarget202110Request $store_target202110_request The store target to set the scope for (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202110ExternalPreferredLineItemTargetingStoresByLineItemIdRequest($line_item_id, $store_target202110_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApi202110ExternalPreferredLineItemTargetingStoresByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}/targeting/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($store_target202110_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($store_target202110_request));
            } else {
                $httpBody = $store_target202110_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function putApiV1ExternalCampaignByCampaignId($campaign_id, $external_put_campaign = null)
    {
        list($response) = $this->putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign);
        return $response;
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsync($campaign_id, $external_put_campaign = null)
    {
        return $this->putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/2022-07/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_put_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_put_campaign));
            } else {
                $httpBody = $external_put_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse
     */
    public function putApiV2ExternalAuctionLineItemByLineItemId($line_item_id, $auction_line_item_update_model_request = null)
    {
        list($response) = $this->putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id, $auction_line_item_update_model_request);
        return $response;
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id, $auction_line_item_update_model_request = null)
    {
        $request = $this->putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdAsync($line_item_id, $auction_line_item_update_model_request = null)
    {
        return $this->putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $auction_line_item_update_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $auction_line_item_update_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\AuctionLineItemResponse';
        $request = $this->putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV2ExternalAuctionLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV2ExternalAuctionLineItemByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/auction-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auction_line_item_update_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auction_line_item_update_model_request));
            } else {
                $httpBody = $auction_line_item_update_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse
     */
    public function putApiV2ExternalPreferredLineItemByLineItemId($line_item_id, $preferred_line_item_update_model_request = null)
    {
        list($response) = $this->putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id, $preferred_line_item_update_model_request);
        return $response;
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2022_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id, $preferred_line_item_update_model_request = null)
    {
        $request = $this->putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdAsync($line_item_id, $preferred_line_item_update_model_request = null)
    {
        return $this->putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $preferred_line_item_update_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $preferred_line_item_update_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2022_07\Model\PreferredLineItemResponse';
        $request = $this->putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV2ExternalPreferredLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2022_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV2ExternalPreferredLineItemByLineItemId'
            );
        }

        $resourcePath = '/2022-07/retail-media/preferred-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($preferred_line_item_update_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($preferred_line_item_update_model_request));
            } else {
                $httpBody = $preferred_line_item_update_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
