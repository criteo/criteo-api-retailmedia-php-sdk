<?php
/**
 * CampaignApi
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\preview\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\retailmedia\preview\ApiException;
use criteo\api\retailmedia\preview\Configuration;
use criteo\api\retailmedia\preview\HeaderSelector;
use criteo\api\retailmedia\preview\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addRemoveKeywords' => [
            'application/json',
        ],
        'deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId' => [
            'application/json',
        ],
        'fetchKeywords' => [
            'application/json',
        ],
        'fetchProposal' => [
            'application/json',
        ],
        'getApi202207ExternalRetailerByRetailerIdTemplatestemplateId' => [
            'application/json',
        ],
        'getApi202207ExternalRetailerTemplatesByRetailerId' => [
            'application/json',
        ],
        'getApi202210ExternalAccountByAccountIdCreativescreativeId' => [
            'application/json',
        ],
        'getApi202210ExternalLineItemProductButtonsByLineItemId' => [
            'application/json',
        ],
        'getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId' => [
            'application/json',
        ],
        'getApi202301ExternalLineItemBidMultipliersByLineItemId' => [
            'application/json',
        ],
        'getApiV0ExternalCatalogOutputByCatalogId' => [
            'application/json',
        ],
        'getApiV0ExternalCatalogStatusByCatalogId' => [
            'application/json',
        ],
        'getApiV1ExternalAccountBrandsByAccountId' => [
            'application/json',
        ],
        'getApiV1ExternalAccountRetailersByAccountId' => [
            'application/json',
        ],
        'getApiV1ExternalAccounts' => [
            'application/json',
        ],
        'getApiV1ExternalRetailerBrandsByRetailerId' => [
            'application/json',
        ],
        'getApiV1ExternalRetailerByRetailerIdSellerBySeller' => [
            'application/json',
        ],
        'getApiV1ExternalRetailerCategoryCpcRatesByRetailerId' => [
            'application/json',
        ],
        'getApiV1ExternalRetailerPlacementsByRetailerId' => [
            'application/json',
        ],
        'postApi202210ExternalAccountCreativesByAccountId' => [
            'application/json',
        ],
        'postApi202210ExternalAccountCreativesSearchByAccountId' => [
            'application/json',
        ],
        'postApi202210ExternalLineItemProductButtonsCreateByLineItemId' => [
            'application/json',
        ],
        'postApiV0ExternalAccountCatalogsByAccountId' => [
            'application/json',
        ],
        'postApiV1ExternalCatalogsSkuRetrieval' => [
            'application/json',
        ],
        'postApiV1ExternalCatalogsSkuSearch' => [
            'application/json',
        ],
        'postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId' => [
            'application/json',
        ],
        'postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId' => [
            'application/json',
        ],
        'putApi202210ExternalAccountByAccountIdCreativescreativeId' => [
            'application/json',
        ],
        'putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId' => [
            'application/json',
        ],
        'putApi202301ExternalLineItemBidMultipliersByLineItemId' => [
            'application/json',
        ],
        'setKeywordBids' => [
            'application/json',
        ],
        'submitProposal' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addRemoveKeywords
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1AddRemoveKeywordsModelRequest $retail_media_externalv1_add_remove_keywords_model_request Object containing keywords to be added or removed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRemoveKeywords'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome
     */
    public function addRemoveKeywords($id, $retail_media_externalv1_add_remove_keywords_model_request = null, string $contentType = self::contentTypes['addRemoveKeywords'][0])
    {
        list($response) = $this->addRemoveKeywordsWithHttpInfo($id, $retail_media_externalv1_add_remove_keywords_model_request, $contentType);
        return $response;
    }

    /**
     * Operation addRemoveKeywordsWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1AddRemoveKeywordsModelRequest $retail_media_externalv1_add_remove_keywords_model_request Object containing keywords to be added or removed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRemoveKeywords'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome, HTTP status code, HTTP response headers (array of strings)
     */
    public function addRemoveKeywordsWithHttpInfo($id, $retail_media_externalv1_add_remove_keywords_model_request = null, string $contentType = self::contentTypes['addRemoveKeywords'][0])
    {
        $request = $this->addRemoveKeywordsRequest($id, $retail_media_externalv1_add_remove_keywords_model_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addRemoveKeywordsAsync
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1AddRemoveKeywordsModelRequest $retail_media_externalv1_add_remove_keywords_model_request Object containing keywords to be added or removed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRemoveKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRemoveKeywordsAsync($id, $retail_media_externalv1_add_remove_keywords_model_request = null, string $contentType = self::contentTypes['addRemoveKeywords'][0])
    {
        return $this->addRemoveKeywordsAsyncWithHttpInfo($id, $retail_media_externalv1_add_remove_keywords_model_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addRemoveKeywordsAsyncWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1AddRemoveKeywordsModelRequest $retail_media_externalv1_add_remove_keywords_model_request Object containing keywords to be added or removed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRemoveKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addRemoveKeywordsAsyncWithHttpInfo($id, $retail_media_externalv1_add_remove_keywords_model_request = null, string $contentType = self::contentTypes['addRemoveKeywords'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome';
        $request = $this->addRemoveKeywordsRequest($id, $retail_media_externalv1_add_remove_keywords_model_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addRemoveKeywords'
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1AddRemoveKeywordsModelRequest $retail_media_externalv1_add_remove_keywords_model_request Object containing keywords to be added or removed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addRemoveKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addRemoveKeywordsRequest($id, $retail_media_externalv1_add_remove_keywords_model_request = null, string $contentType = self::contentTypes['addRemoveKeywords'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addRemoveKeywords'
            );
        }



        $resourcePath = '/preview/retail-media/line-items/{id}/keywords/add-remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($retail_media_externalv1_add_remove_keywords_model_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($retail_media_externalv1_add_remove_keywords_model_request));
            } else {
                $httpBody = $retail_media_externalv1_add_remove_keywords_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId($line_item_id, $product_button_id, string $contentType = self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $this->deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, $contentType);
    }

    /**
     * Operation deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, string $contentType = self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $request = $this->deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync($line_item_id, $product_button_id, string $contentType = self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        return $this->deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, string $contentType = self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $returnType = '';
        $request = $this->deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, string $contentType = self::contentTypes['deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }

        // verify the required parameter 'product_button_id' is set
        if ($product_button_id === null || (is_array($product_button_id) && count($product_button_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_button_id when calling deleteApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }


        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }
        // path params
        if ($product_button_id !== null) {
            $resourcePath = str_replace(
                '{' . 'product-button-id' . '}',
                ObjectSerializer::toPathValue($product_button_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchKeywords
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchKeywords'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse
     */
    public function fetchKeywords($id, string $contentType = self::contentTypes['fetchKeywords'][0])
    {
        list($response) = $this->fetchKeywordsWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation fetchKeywordsWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchKeywords'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchKeywordsWithHttpInfo($id, string $contentType = self::contentTypes['fetchKeywords'][0])
    {
        $request = $this->fetchKeywordsRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchKeywordsAsync
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchKeywordsAsync($id, string $contentType = self::contentTypes['fetchKeywords'][0])
    {
        return $this->fetchKeywordsAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchKeywordsAsyncWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchKeywordsAsyncWithHttpInfo($id, string $contentType = self::contentTypes['fetchKeywords'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1KeywordsModelResponse';
        $request = $this->fetchKeywordsRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchKeywords'
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchKeywordsRequest($id, string $contentType = self::contentTypes['fetchKeywords'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fetchKeywords'
            );
        }


        $resourcePath = '/preview/retail-media/line-items/{id}/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchProposal
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchProposal'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse
     */
    public function fetchProposal($id, string $contentType = self::contentTypes['fetchProposal'][0])
    {
        list($response) = $this->fetchProposalWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation fetchProposalWithHttpInfo
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchProposal'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchProposalWithHttpInfo($id, string $contentType = self::contentTypes['fetchProposal'][0])
    {
        $request = $this->fetchProposalRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchProposalAsync
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchProposalAsync($id, string $contentType = self::contentTypes['fetchProposal'][0])
    {
        return $this->fetchProposalAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchProposalAsyncWithHttpInfo
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchProposalAsyncWithHttpInfo($id, string $contentType = self::contentTypes['fetchProposal'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse';
        $request = $this->fetchProposalRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchProposal'
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchProposalRequest($id, string $contentType = self::contentTypes['fetchProposal'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fetchProposal'
            );
        }


        $resourcePath = '/preview/retail-media/preferred-deal-line-items/{id}/proposal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202207ExternalRetailerByRetailerIdTemplatestemplateId
     *
     * @param  int $retailer_id Retailer Id (required)
     * @param  int $template_id Template Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\TemplateResponse
     */
    public function getApi202207ExternalRetailerByRetailerIdTemplatestemplateId($retailer_id, $template_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'][0])
    {
        list($response) = $this->getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdWithHttpInfo($retailer_id, $template_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdWithHttpInfo
     *
     * @param  int $retailer_id Retailer Id (required)
     * @param  int $template_id Template Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\TemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdWithHttpInfo($retailer_id, $template_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'][0])
    {
        $request = $this->getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdRequest($retailer_id, $template_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\TemplateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\TemplateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\TemplateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\TemplateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\TemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsync
     *
     * @param  int $retailer_id Retailer Id (required)
     * @param  int $template_id Template Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsync($retailer_id, $template_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'][0])
    {
        return $this->getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsyncWithHttpInfo($retailer_id, $template_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsyncWithHttpInfo
     *
     * @param  int $retailer_id Retailer Id (required)
     * @param  int $template_id Template Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdAsyncWithHttpInfo($retailer_id, $template_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\TemplateResponse';
        $request = $this->getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdRequest($retailer_id, $template_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'
     *
     * @param  int $retailer_id Retailer Id (required)
     * @param  int $template_id Template Id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202207ExternalRetailerByRetailerIdTemplatestemplateIdRequest($retailer_id, $template_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'
            );
        }

        // verify the required parameter 'template_id' is set
        if ($template_id === null || (is_array($template_id) && count($template_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $template_id when calling getApi202207ExternalRetailerByRetailerIdTemplatestemplateId'
            );
        }


        $resourcePath = '/preview/retail-media/retailers/{retailer-id}/templates/{template-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }
        // path params
        if ($template_id !== null) {
            $resourcePath = str_replace(
                '{' . 'template-id' . '}',
                ObjectSerializer::toPathValue($template_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202207ExternalRetailerTemplatesByRetailerId
     *
     * @param  int $retailer_id External retailer id to retrieve creative templates for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\TemplateListResponse
     */
    public function getApi202207ExternalRetailerTemplatesByRetailerId($retailer_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'][0])
    {
        list($response) = $this->getApi202207ExternalRetailerTemplatesByRetailerIdWithHttpInfo($retailer_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202207ExternalRetailerTemplatesByRetailerIdWithHttpInfo
     *
     * @param  int $retailer_id External retailer id to retrieve creative templates for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\TemplateListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202207ExternalRetailerTemplatesByRetailerIdWithHttpInfo($retailer_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'][0])
    {
        $request = $this->getApi202207ExternalRetailerTemplatesByRetailerIdRequest($retailer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\TemplateListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\TemplateListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\TemplateListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\TemplateListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\TemplateListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202207ExternalRetailerTemplatesByRetailerIdAsync
     *
     * @param  int $retailer_id External retailer id to retrieve creative templates for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202207ExternalRetailerTemplatesByRetailerIdAsync($retailer_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'][0])
    {
        return $this->getApi202207ExternalRetailerTemplatesByRetailerIdAsyncWithHttpInfo($retailer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202207ExternalRetailerTemplatesByRetailerIdAsyncWithHttpInfo
     *
     * @param  int $retailer_id External retailer id to retrieve creative templates for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202207ExternalRetailerTemplatesByRetailerIdAsyncWithHttpInfo($retailer_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\TemplateListResponse';
        $request = $this->getApi202207ExternalRetailerTemplatesByRetailerIdRequest($retailer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202207ExternalRetailerTemplatesByRetailerId'
     *
     * @param  int $retailer_id External retailer id to retrieve creative templates for (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202207ExternalRetailerTemplatesByRetailerIdRequest($retailer_id, string $contentType = self::contentTypes['getApi202207ExternalRetailerTemplatesByRetailerId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApi202207ExternalRetailerTemplatesByRetailerId'
            );
        }


        $resourcePath = '/preview/retail-media/retailers/{retailer-id}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202210ExternalAccountByAccountIdCreativescreativeId
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string $creative_id Creative to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\Creative202210Response
     */
    public function getApi202210ExternalAccountByAccountIdCreativescreativeId($account_id, $creative_id, string $contentType = self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        list($response) = $this->getApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo($account_id, $creative_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string $creative_id Creative to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\Creative202210Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo($account_id, $creative_id, string $contentType = self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        $request = $this->getApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\Creative202210Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\Creative202210Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202210ExternalAccountByAccountIdCreativescreativeIdAsync
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string $creative_id Creative to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalAccountByAccountIdCreativescreativeIdAsync($account_id, $creative_id, string $contentType = self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        return $this->getApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo($account_id, $creative_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string $creative_id Creative to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo($account_id, $creative_id, string $contentType = self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
        $request = $this->getApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202210ExternalAccountByAccountIdCreativescreativeId'
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string $creative_id Creative to get (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, string $contentType = self::contentTypes['getApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApi202210ExternalAccountByAccountIdCreativescreativeId'
            );
        }

        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling getApi202210ExternalAccountByAccountIdCreativescreativeId'
            );
        }


        $resourcePath = '/preview/retail-media/accounts/{account-id}/creatives/{creative-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative-id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\ProductButtonListResponse
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemId($line_item_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'][0])
    {
        list($response) = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo($line_item_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\ProductButtonListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdWithHttpInfo($line_item_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'][0])
    {
        $request = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdRequest($line_item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\ProductButtonListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\ProductButtonListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdAsync($line_item_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'][0])
    {
        return $this->getApi202210ExternalLineItemProductButtonsByLineItemIdAsyncWithHttpInfo($line_item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdAsyncWithHttpInfo($line_item_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse';
        $request = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdRequest($line_item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202210ExternalLineItemProductButtonsByLineItemId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdRequest($line_item_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202210ExternalLineItemProductButtonsByLineItemId'
            );
        }


        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/product-buttons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\ProductButtonResponse
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId($line_item_id, $product_button_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        list($response) = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\ProductButtonResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $request = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\ProductButtonResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\ProductButtonResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\ProductButtonResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\ProductButtonResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync($line_item_id, $product_button_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        return $this->getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonResponse';
        $request = $this->getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, string $contentType = self::contentTypes['getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }

        // verify the required parameter 'product_button_id' is set
        if ($product_button_id === null || (is_array($product_button_id) && count($product_button_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_button_id when calling getApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }


        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }
        // path params
        if ($product_button_id !== null) {
            $resourcePath = str_replace(
                '{' . 'product-button-id' . '}',
                ObjectSerializer::toPathValue($product_button_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApi202301ExternalLineItemBidMultipliersByLineItemId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers
     */
    public function getApi202301ExternalLineItemBidMultipliersByLineItemId($line_item_id, string $contentType = self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        list($response) = $this->getApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo($line_item_id, $contentType);
        return $response;
    }

    /**
     * Operation getApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo($line_item_id, string $contentType = self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        $request = $this->getApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApi202301ExternalLineItemBidMultipliersByLineItemIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202301ExternalLineItemBidMultipliersByLineItemIdAsync($line_item_id, string $contentType = self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        return $this->getApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo($line_item_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo($line_item_id, string $contentType = self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfLineItemBidMultipliers';
        $request = $this->getApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApi202301ExternalLineItemBidMultipliersByLineItemId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, string $contentType = self::contentTypes['getApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApi202301ExternalLineItemBidMultipliersByLineItemId'
            );
        }


        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/bid-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getApiV0ExternalCatalogOutputByCatalogId($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'][0])
    {
        $this->getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id, $contentType);
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'][0])
    {
        $request = $this->getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdAsync($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'][0])
    {
        return $this->getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'][0])
    {
        $returnType = '';
        $request = $this->getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV0ExternalCatalogOutputByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV0ExternalCatalogOutputByCatalogIdRequest($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogOutputByCatalogId'][0])
    {

        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV0ExternalCatalogOutputByCatalogId'
            );
        }


        $resourcePath = '/preview/retail-media/catalogs/{catalogId}/output';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/x-json-stream', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function getApiV0ExternalCatalogStatusByCatalogId($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'][0])
    {
        list($response) = $this->getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'][0])
    {
        $request = $this->getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdAsync($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'][0])
    {
        return $this->getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV0ExternalCatalogStatusByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV0ExternalCatalogStatusByCatalogIdRequest($catalog_id, string $contentType = self::contentTypes['getApiV0ExternalCatalogStatusByCatalogId'][0])
    {

        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV0ExternalCatalogStatusByCatalogId'
            );
        }


        $resourcePath = '/preview/retail-media/catalogs/{catalogId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand
     */
    public function getApiV1ExternalAccountBrandsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'][0])
    {
        list($response) = $this->getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'][0])
    {
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'][0])
    {
        return $this->getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfBrand';
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBrandsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountBrandsByAccountId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBrandsByAccountId'
            );
        }





        $resourcePath = '/preview/retail-media/accounts/{accountId}/brands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_to_id,
            'limitToId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer
     */
    public function getApiV1ExternalAccountRetailersByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'][0])
    {
        list($response) = $this->getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'][0])
    {
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'][0])
    {
        return $this->getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfRetailer';
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountRetailersByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccountRetailersByAccountId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountRetailersByAccountId'
            );
        }





        $resourcePath = '/preview/retail-media/accounts/{accountId}/retailers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_to_id,
            'limitToId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccounts
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccounts'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount
     */
    public function getApiV1ExternalAccounts($limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccounts'][0])
    {
        list($response) = $this->getApiV1ExternalAccountsWithHttpInfo($limit_to_id, $page_index, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountsWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccounts'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountsWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccounts'][0])
    {
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountsAsync
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsync($limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccounts'][0])
    {
        return $this->getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id, $page_index, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountsAsyncWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccounts'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiPageResponseOfAccount';
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccounts'
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountsRequest($limit_to_id = null, $page_index = null, $page_size = null, string $contentType = self::contentTypes['getApiV1ExternalAccounts'][0])
    {





        $resourcePath = '/preview/retail-media/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit_to_id,
            'limitToId', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalRetailerBrandsByRetailerId
     *
     * @param  int $retailer_id The retailer id for which brands should be fetched. (required)
     * @param  string $sku_stock_type_filter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param  string $brand_type Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\BrandPreviewListResponse
     */
    public function getApiV1ExternalRetailerBrandsByRetailerId($retailer_id, $sku_stock_type_filter = null, $brand_type = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'][0])
    {
        list($response) = $this->getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo($retailer_id, $sku_stock_type_filter, $brand_type, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which brands should be fetched. (required)
     * @param  string $sku_stock_type_filter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param  string $brand_type Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\BrandPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalRetailerBrandsByRetailerIdWithHttpInfo($retailer_id, $sku_stock_type_filter = null, $brand_type = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'][0])
    {
        $request = $this->getApiV1ExternalRetailerBrandsByRetailerIdRequest($retailer_id, $sku_stock_type_filter, $brand_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalRetailerBrandsByRetailerIdAsync
     *
     * @param  int $retailer_id The retailer id for which brands should be fetched. (required)
     * @param  string $sku_stock_type_filter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param  string $brand_type Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerBrandsByRetailerIdAsync($retailer_id, $sku_stock_type_filter = null, $brand_type = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'][0])
    {
        return $this->getApiV1ExternalRetailerBrandsByRetailerIdAsyncWithHttpInfo($retailer_id, $sku_stock_type_filter, $brand_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalRetailerBrandsByRetailerIdAsyncWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which brands should be fetched. (required)
     * @param  string $sku_stock_type_filter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param  string $brand_type Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerBrandsByRetailerIdAsyncWithHttpInfo($retailer_id, $sku_stock_type_filter = null, $brand_type = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\BrandPreviewListResponse';
        $request = $this->getApiV1ExternalRetailerBrandsByRetailerIdRequest($retailer_id, $sku_stock_type_filter, $brand_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalRetailerBrandsByRetailerId'
     *
     * @param  int $retailer_id The retailer id for which brands should be fetched. (required)
     * @param  string $sku_stock_type_filter Filter to narrow down brands [first-party|third-party|first-and-third-party]. Defaults to first-and-third-party (optional)
     * @param  string $brand_type Filter to narrow down brands [all|uc|retailer]. Defaults to uc (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalRetailerBrandsByRetailerIdRequest($retailer_id, $sku_stock_type_filter = null, $brand_type = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerBrandsByRetailerId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApiV1ExternalRetailerBrandsByRetailerId'
            );
        }




        $resourcePath = '/preview/retail-media/retailers/{retailerId}/brands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sku_stock_type_filter,
            'sku-stock-type-filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brand_type,
            'brand-type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailerId' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySeller
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SellerPreviewResponse
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySeller($retailer_id, $seller, string $contentType = self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'][0])
    {
        list($response) = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo($retailer_id, $seller, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SellerPreviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerWithHttpInfo($retailer_id, $seller, string $contentType = self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'][0])
    {
        $request = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SellerPreviewResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\SellerPreviewResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerAsync($retailer_id, $seller, string $contentType = self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'][0])
    {
        return $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo($retailer_id, $seller, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerAsyncWithHttpInfo($retailer_id, $seller, string $contentType = self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SellerPreviewResponse';
        $request = $this->getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalRetailerByRetailerIdSellerBySeller'
     *
     * @param  int $retailer_id The retailer id for which seller should be fetched. (required)
     * @param  string $seller The seller id or seller name which should be validated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalRetailerByRetailerIdSellerBySellerRequest($retailer_id, $seller, string $contentType = self::contentTypes['getApiV1ExternalRetailerByRetailerIdSellerBySeller'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller'
            );
        }

        // verify the required parameter 'seller' is set
        if ($seller === null || (is_array($seller) && count($seller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller when calling getApiV1ExternalRetailerByRetailerIdSellerBySeller'
            );
        }


        $resourcePath = '/preview/retail-media/retailers/{retailerId}/sellers/{seller}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailerId' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }
        // path params
        if ($seller !== null) {
            $resourcePath = str_replace(
                '{' . 'seller' . '}',
                ObjectSerializer::toPathValue($seller),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalRetailerCategoryCpcRatesByRetailerId
     *
     * @param  string $retailer_id The retailer id (required)
     * @param  string[] $fields The fields in the response that is to be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse
     */
    public function getApiV1ExternalRetailerCategoryCpcRatesByRetailerId($retailer_id, $fields = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'][0])
    {
        list($response) = $this->getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo($retailer_id, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo
     *
     * @param  string $retailer_id The retailer id (required)
     * @param  string[] $fields The fields in the response that is to be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdWithHttpInfo($retailer_id, $fields = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'][0])
    {
        $request = $this->getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdRequest($retailer_id, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsync
     *
     * @param  string $retailer_id The retailer id (required)
     * @param  string[] $fields The fields in the response that is to be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsync($retailer_id, $fields = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'][0])
    {
        return $this->getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsyncWithHttpInfo($retailer_id, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsyncWithHttpInfo
     *
     * @param  string $retailer_id The retailer id (required)
     * @param  string[] $fields The fields in the response that is to be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdAsyncWithHttpInfo($retailer_id, $fields = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\CpcRateCardPreviewResponse';
        $request = $this->getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdRequest($retailer_id, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'
     *
     * @param  string $retailer_id The retailer id (required)
     * @param  string[] $fields The fields in the response that is to be included (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalRetailerCategoryCpcRatesByRetailerIdRequest($retailer_id, $fields = null, string $contentType = self::contentTypes['getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApiV1ExternalRetailerCategoryCpcRatesByRetailerId'
            );
        }



        $resourcePath = '/preview/retail-media/retailers/{retailer-id}/cpc-rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalRetailerPlacementsByRetailerId
     *
     * @param  string $retailer_id The retailer id for which placements should be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse
     */
    public function getApiV1ExternalRetailerPlacementsByRetailerId($retailer_id, string $contentType = self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'][0])
    {
        list($response) = $this->getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo($retailer_id, $contentType);
        return $response;
    }

    /**
     * Operation getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo
     *
     * @param  string $retailer_id The retailer id for which placements should be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalRetailerPlacementsByRetailerIdWithHttpInfo($retailer_id, string $contentType = self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'][0])
    {
        $request = $this->getApiV1ExternalRetailerPlacementsByRetailerIdRequest($retailer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalRetailerPlacementsByRetailerIdAsync
     *
     * @param  string $retailer_id The retailer id for which placements should be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerPlacementsByRetailerIdAsync($retailer_id, string $contentType = self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'][0])
    {
        return $this->getApiV1ExternalRetailerPlacementsByRetailerIdAsyncWithHttpInfo($retailer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalRetailerPlacementsByRetailerIdAsyncWithHttpInfo
     *
     * @param  string $retailer_id The retailer id for which placements should be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalRetailerPlacementsByRetailerIdAsyncWithHttpInfo($retailer_id, string $contentType = self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\PlacementPreviewListResponse';
        $request = $this->getApiV1ExternalRetailerPlacementsByRetailerIdRequest($retailer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalRetailerPlacementsByRetailerId'
     *
     * @param  string $retailer_id The retailer id for which placements should be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalRetailerPlacementsByRetailerIdRequest($retailer_id, string $contentType = self::contentTypes['getApiV1ExternalRetailerPlacementsByRetailerId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling getApiV1ExternalRetailerPlacementsByRetailerId'
            );
        }


        $resourcePath = '/preview/retail-media/retailers/{retailer-id}/placements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202210ExternalAccountCreativesByAccountId
     *
     * @param  string $account_id External account id to create a creative for (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeCreateModel202207 $creative_create_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\Creative202210Response
     */
    public function postApi202210ExternalAccountCreativesByAccountId($account_id, $creative_create_model202207 = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'][0])
    {
        list($response) = $this->postApi202210ExternalAccountCreativesByAccountIdWithHttpInfo($account_id, $creative_create_model202207, $contentType);
        return $response;
    }

    /**
     * Operation postApi202210ExternalAccountCreativesByAccountIdWithHttpInfo
     *
     * @param  string $account_id External account id to create a creative for (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeCreateModel202207 $creative_create_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\Creative202210Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202210ExternalAccountCreativesByAccountIdWithHttpInfo($account_id, $creative_create_model202207 = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'][0])
    {
        $request = $this->postApi202210ExternalAccountCreativesByAccountIdRequest($account_id, $creative_create_model202207, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\Creative202210Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\Creative202210Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202210ExternalAccountCreativesByAccountIdAsync
     *
     * @param  string $account_id External account id to create a creative for (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeCreateModel202207 $creative_create_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalAccountCreativesByAccountIdAsync($account_id, $creative_create_model202207 = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'][0])
    {
        return $this->postApi202210ExternalAccountCreativesByAccountIdAsyncWithHttpInfo($account_id, $creative_create_model202207, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202210ExternalAccountCreativesByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id External account id to create a creative for (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeCreateModel202207 $creative_create_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalAccountCreativesByAccountIdAsyncWithHttpInfo($account_id, $creative_create_model202207 = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
        $request = $this->postApi202210ExternalAccountCreativesByAccountIdRequest($account_id, $creative_create_model202207, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202210ExternalAccountCreativesByAccountId'
     *
     * @param  string $account_id External account id to create a creative for (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeCreateModel202207 $creative_create_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202210ExternalAccountCreativesByAccountIdRequest($account_id, $creative_create_model202207 = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesByAccountId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApi202210ExternalAccountCreativesByAccountId'
            );
        }



        $resourcePath = '/preview/retail-media/accounts/{account-id}/creatives';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($creative_create_model202207)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($creative_create_model202207));
            } else {
                $httpBody = $creative_create_model202207;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202210ExternalAccountCreativesSearchByAccountId
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string[] $creative_ids Creatives to filter by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\Creative202210ListResponse
     */
    public function postApi202210ExternalAccountCreativesSearchByAccountId($account_id, $creative_ids = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'][0])
    {
        list($response) = $this->postApi202210ExternalAccountCreativesSearchByAccountIdWithHttpInfo($account_id, $creative_ids, $contentType);
        return $response;
    }

    /**
     * Operation postApi202210ExternalAccountCreativesSearchByAccountIdWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string[] $creative_ids Creatives to filter by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\Creative202210ListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202210ExternalAccountCreativesSearchByAccountIdWithHttpInfo($account_id, $creative_ids = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'][0])
    {
        $request = $this->postApi202210ExternalAccountCreativesSearchByAccountIdRequest($account_id, $creative_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\Creative202210ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\Creative202210ListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\Creative202210ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\Creative202210ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202210ExternalAccountCreativesSearchByAccountIdAsync
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string[] $creative_ids Creatives to filter by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalAccountCreativesSearchByAccountIdAsync($account_id, $creative_ids = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'][0])
    {
        return $this->postApi202210ExternalAccountCreativesSearchByAccountIdAsyncWithHttpInfo($account_id, $creative_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202210ExternalAccountCreativesSearchByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string[] $creative_ids Creatives to filter by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalAccountCreativesSearchByAccountIdAsyncWithHttpInfo($account_id, $creative_ids = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210ListResponse';
        $request = $this->postApi202210ExternalAccountCreativesSearchByAccountIdRequest($account_id, $creative_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202210ExternalAccountCreativesSearchByAccountId'
     *
     * @param  string $account_id External account id to retrieve creatives for (required)
     * @param  string[] $creative_ids Creatives to filter by (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202210ExternalAccountCreativesSearchByAccountIdRequest($account_id, $creative_ids = null, string $contentType = self::contentTypes['postApi202210ExternalAccountCreativesSearchByAccountId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApi202210ExternalAccountCreativesSearchByAccountId'
            );
        }



        $resourcePath = '/preview/retail-media/accounts/{account-id}/creatives/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creative_ids,
            'creative-ids', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApi202210ExternalLineItemProductButtonsCreateByLineItemId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonListRequest $product_button_list_request List of product buttons to append to the specified line item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\ProductButtonListResponse
     */
    public function postApi202210ExternalLineItemProductButtonsCreateByLineItemId($line_item_id, $product_button_list_request = null, string $contentType = self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'][0])
    {
        list($response) = $this->postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo($line_item_id, $product_button_list_request, $contentType);
        return $response;
    }

    /**
     * Operation postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonListRequest $product_button_list_request List of product buttons to append to the specified line item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\ProductButtonListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApi202210ExternalLineItemProductButtonsCreateByLineItemIdWithHttpInfo($line_item_id, $product_button_list_request = null, string $contentType = self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'][0])
    {
        $request = $this->postApi202210ExternalLineItemProductButtonsCreateByLineItemIdRequest($line_item_id, $product_button_list_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\ProductButtonListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\ProductButtonListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonListRequest $product_button_list_request List of product buttons to append to the specified line item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsync($line_item_id, $product_button_list_request = null, string $contentType = self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'][0])
    {
        return $this->postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsyncWithHttpInfo($line_item_id, $product_button_list_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonListRequest $product_button_list_request List of product buttons to append to the specified line item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApi202210ExternalLineItemProductButtonsCreateByLineItemIdAsyncWithHttpInfo($line_item_id, $product_button_list_request = null, string $contentType = self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonListResponse';
        $request = $this->postApi202210ExternalLineItemProductButtonsCreateByLineItemIdRequest($line_item_id, $product_button_list_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApi202210ExternalLineItemProductButtonsCreateByLineItemId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonListRequest $product_button_list_request List of product buttons to append to the specified line item (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApi202210ExternalLineItemProductButtonsCreateByLineItemIdRequest($line_item_id, $product_button_list_request = null, string $contentType = self::contentTypes['postApi202210ExternalLineItemProductButtonsCreateByLineItemId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling postApi202210ExternalLineItemProductButtonsCreateByLineItemId'
            );
        }



        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/product-buttons/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_button_list_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_button_list_request));
            } else {
                $httpBody = $product_button_list_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountId
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview json_api_request_of_catalog_request_preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function postApiV0ExternalAccountCatalogsByAccountId($account_id, $json_api_request_of_catalog_request_preview = null, string $contentType = self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'][0])
    {
        list($response) = $this->postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview, $contentType);
        return $response;
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview = null, string $contentType = self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'][0])
    {
        $request = $this->postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdAsync
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdAsync($account_id, $json_api_request_of_catalog_request_preview = null, string $contentType = self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'][0])
    {
        return $this->postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request_preview = null, string $contentType = self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV0ExternalAccountCatalogsByAccountId'
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\preview\Model\JsonApiRequestOfCatalogRequestPreview $json_api_request_of_catalog_request_preview (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV0ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request_preview = null, string $contentType = self::contentTypes['postApiV0ExternalAccountCatalogsByAccountId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV0ExternalAccountCatalogsByAccountId'
            );
        }



        $resourcePath = '/preview/retail-media/accounts/{accountId}/catalogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($json_api_request_of_catalog_request_preview)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($json_api_request_of_catalog_request_preview));
            } else {
                $httpBody = $json_api_request_of_catalog_request_preview;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrieval
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse
     */
    public function postApiV1ExternalCatalogsSkuRetrieval($page_index = 0, $page_size = 100, $request_body = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'][0])
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo($page_index, $page_size, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuRetrievalWithHttpInfo($page_index = 0, $page_size = 100, $request_body = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'][0])
    {
        $request = $this->postApiV1ExternalCatalogsSkuRetrievalRequest($page_index, $page_size, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalAsync
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuRetrievalAsync($page_index = 0, $page_size = 100, $request_body = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'][0])
    {
        return $this->postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo($page_index, $page_size, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuRetrievalAsyncWithHttpInfo($page_index = 0, $page_size = 100, $request_body = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuRetrievalRequest($page_index, $page_size, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuRetrieval'
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  string[] $request_body The list of SKU keys to retrieve sku information (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuRetrievalRequest($page_index = 0, $page_size = 100, $request_body = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuRetrieval'][0])
    {

        if ($page_index !== null && $page_index > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be smaller than or equal to 500.');
        }
        if ($page_index !== null && $page_index < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuRetrieval, must be bigger than or equal to 1.');
        }
        
        

        $resourcePath = '/preview/retail-media/catalogs/sku-retrieval';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearch
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearch'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse
     */
    public function postApiV1ExternalCatalogsSkuSearch($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearch'][0])
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuSearchWithHttpInfo($page_index, $page_size, $sku_search_request_preview_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearch'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuSearchWithHttpInfo($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearch'][0])
    {
        $request = $this->postApiV1ExternalCatalogsSkuSearchRequest($page_index, $page_size, $sku_search_request_preview_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAsync
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAsync($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearch'][0])
    {
        return $this->postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo($page_index, $page_size, $sku_search_request_preview_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAsyncWithHttpInfo($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearch'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuDataPreviewListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuSearchRequest($page_index, $page_size, $sku_search_request_preview_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuSearch'
     *
     * @param  int $page_index The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $page_size The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestPreviewRequest $sku_search_request_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuSearchRequest($page_index = 0, $page_size = 100, $sku_search_request_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearch'][0])
    {

        if ($page_index !== null && $page_index > 500) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be smaller than or equal to 500.');
        }
        if ($page_index !== null && $page_index < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_index" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be bigger than or equal to 0.');
        }
        
        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearch, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/preview/retail-media/catalogs/sku-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sku_search_request_preview_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sku_search_request_preview_request));
            } else {
                $httpBody = $sku_search_request_preview_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId
     *
     * @param  string $account_id The account for which skus should be searched for. (required)
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimPreviewRequest $sku_search_request_slim_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse
     */
    public function postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId($account_id, $retailer_id, $offset = 0, $limit = 100, $sku_search_request_slim_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'][0])
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo($account_id, $retailer_id, $offset, $limit, $sku_search_request_slim_preview_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo
     *
     * @param  string $account_id The account for which skus should be searched for. (required)
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimPreviewRequest $sku_search_request_slim_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdWithHttpInfo($account_id, $retailer_id, $offset = 0, $limit = 100, $sku_search_request_slim_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'][0])
    {
        $request = $this->postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdRequest($account_id, $retailer_id, $offset, $limit, $sku_search_request_slim_preview_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsync
     *
     * @param  string $account_id The account for which skus should be searched for. (required)
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimPreviewRequest $sku_search_request_slim_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsync($account_id, $retailer_id, $offset = 0, $limit = 100, $sku_search_request_slim_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'][0])
    {
        return $this->postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsyncWithHttpInfo($account_id, $retailer_id, $offset, $limit, $sku_search_request_slim_preview_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account for which skus should be searched for. (required)
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimPreviewRequest $sku_search_request_slim_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdAsyncWithHttpInfo($account_id, $retailer_id, $offset = 0, $limit = 100, $sku_search_request_slim_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuSlimDataPreviewListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdRequest($account_id, $retailer_id, $offset, $limit, $sku_search_request_slim_preview_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'
     *
     * @param  string $account_id The account for which skus should be searched for. (required)
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimPreviewRequest $sku_search_request_slim_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerIdRequest($account_id, $retailer_id, $offset = 0, $limit = 100, $sku_search_request_slim_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'
            );
        }

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId'
            );
        }


        if ($limit !== null && $limit > 1500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId, must be smaller than or equal to 1500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearchAccountIdAndRetailerId, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/preview/retail-media/catalogs/sku-search/accounts/{account-id}/retailers/{retailer-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sku_search_request_slim_preview_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sku_search_request_slim_preview_request));
            } else {
                $httpBody = $sku_search_request_slim_preview_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId
     *
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  string $x_origin_account The account id of the initiator of the call. (optional)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimV2PreviewRequest $sku_search_request_slim_v2_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse
     */
    public function postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId($retailer_id, $x_origin_account = null, $offset = 0, $limit = 100, $sku_search_request_slim_v2_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'][0])
    {
        list($response) = $this->postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo($retailer_id, $x_origin_account, $offset, $limit, $sku_search_request_slim_v2_preview_request, $contentType);
        return $response;
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo
     *
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  string $x_origin_account The account id of the initiator of the call. (optional)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimV2PreviewRequest $sku_search_request_slim_v2_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdWithHttpInfo($retailer_id, $x_origin_account = null, $offset = 0, $limit = 100, $sku_search_request_slim_v2_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'][0])
    {
        $request = $this->postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdRequest($retailer_id, $x_origin_account, $offset, $limit, $sku_search_request_slim_v2_preview_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsync
     *
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  string $x_origin_account The account id of the initiator of the call. (optional)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimV2PreviewRequest $sku_search_request_slim_v2_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsync($retailer_id, $x_origin_account = null, $offset = 0, $limit = 100, $sku_search_request_slim_v2_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'][0])
    {
        return $this->postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsyncWithHttpInfo($retailer_id, $x_origin_account, $offset, $limit, $sku_search_request_slim_v2_preview_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsyncWithHttpInfo
     *
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  string $x_origin_account The account id of the initiator of the call. (optional)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimV2PreviewRequest $sku_search_request_slim_v2_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdAsyncWithHttpInfo($retailer_id, $x_origin_account = null, $offset = 0, $limit = 100, $sku_search_request_slim_v2_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\SkuSlimDataV2ListResponse';
        $request = $this->postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdRequest($retailer_id, $x_origin_account, $offset, $limit, $sku_search_request_slim_v2_preview_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'
     *
     * @param  string $retailer_id The client id/retailer id for which skus should be searched for. (required)
     * @param  string $x_origin_account The account id of the initiator of the call. (optional)
     * @param  int $offset The start position in the overall list of matches. Must be zero or greater. (optional, default to 0)
     * @param  int $limit The maximum number of results to return with each call. Must be greater than zero and less than 1500. 10,000 records deep is the max limit. (optional, default to 100)
     * @param  \criteo\api\retailmedia\preview\Model\SkuSearchRequestSlimV2PreviewRequest $sku_search_request_slim_v2_preview_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalCatalogsSkuSearchRetailerByRetailerIdRequest($retailer_id, $x_origin_account = null, $offset = 0, $limit = 100, $sku_search_request_slim_v2_preview_request = null, string $contentType = self::contentTypes['postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'][0])
    {

        // verify the required parameter 'retailer_id' is set
        if ($retailer_id === null || (is_array($retailer_id) && count($retailer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retailer_id when calling postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId'
            );
        }



        if ($limit !== null && $limit > 1500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId, must be smaller than or equal to 1500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CampaignApi.postApiV1ExternalCatalogsSkuSearchRetailerByRetailerId, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/preview/retail-media/catalogs/sku/search/retailers/{retailer-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_origin_account !== null) {
            $headerParams['X-Origin-Account'] = ObjectSerializer::toHeaderValue($x_origin_account);
        }

        // path params
        if ($retailer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'retailer-id' . '}',
                ObjectSerializer::toPathValue($retailer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sku_search_request_slim_v2_preview_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sku_search_request_slim_v2_preview_request));
            } else {
                $httpBody = $sku_search_request_slim_v2_preview_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202210ExternalAccountByAccountIdCreativescreativeId
     *
     * @param  string $account_id External account id containing the creative (required)
     * @param  string $creative_id Creative to update (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeUpdateModel202207 $creative_update_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\Creative202210Response
     */
    public function putApi202210ExternalAccountByAccountIdCreativescreativeId($account_id, $creative_id, $creative_update_model202207 = null, string $contentType = self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        list($response) = $this->putApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo($account_id, $creative_id, $creative_update_model202207, $contentType);
        return $response;
    }

    /**
     * Operation putApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo
     *
     * @param  string $account_id External account id containing the creative (required)
     * @param  string $creative_id Creative to update (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeUpdateModel202207 $creative_update_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\Creative202210Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202210ExternalAccountByAccountIdCreativescreativeIdWithHttpInfo($account_id, $creative_id, $creative_update_model202207 = null, string $contentType = self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        $request = $this->putApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, $creative_update_model202207, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\Creative202210Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\Creative202210Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\Creative202210Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202210ExternalAccountByAccountIdCreativescreativeIdAsync
     *
     * @param  string $account_id External account id containing the creative (required)
     * @param  string $creative_id Creative to update (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeUpdateModel202207 $creative_update_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202210ExternalAccountByAccountIdCreativescreativeIdAsync($account_id, $creative_id, $creative_update_model202207 = null, string $contentType = self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        return $this->putApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo($account_id, $creative_id, $creative_update_model202207, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo
     *
     * @param  string $account_id External account id containing the creative (required)
     * @param  string $creative_id Creative to update (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeUpdateModel202207 $creative_update_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202210ExternalAccountByAccountIdCreativescreativeIdAsyncWithHttpInfo($account_id, $creative_id, $creative_update_model202207 = null, string $contentType = self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\Creative202210Response';
        $request = $this->putApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, $creative_update_model202207, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202210ExternalAccountByAccountIdCreativescreativeId'
     *
     * @param  string $account_id External account id containing the creative (required)
     * @param  string $creative_id Creative to update (required)
     * @param  \criteo\api\retailmedia\preview\Model\CreativeUpdateModel202207 $creative_update_model202207 The creative to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202210ExternalAccountByAccountIdCreativescreativeIdRequest($account_id, $creative_id, $creative_update_model202207 = null, string $contentType = self::contentTypes['putApi202210ExternalAccountByAccountIdCreativescreativeId'][0])
    {

        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling putApi202210ExternalAccountByAccountIdCreativescreativeId'
            );
        }

        // verify the required parameter 'creative_id' is set
        if ($creative_id === null || (is_array($creative_id) && count($creative_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creative_id when calling putApi202210ExternalAccountByAccountIdCreativescreativeId'
            );
        }



        $resourcePath = '/preview/retail-media/accounts/{account-id}/creatives/{creative-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }
        // path params
        if ($creative_id !== null) {
            $resourcePath = str_replace(
                '{' . 'creative-id' . '}',
                ObjectSerializer::toPathValue($creative_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($creative_update_model202207)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($creative_update_model202207));
            } else {
                $httpBody = $creative_update_model202207;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonRequest $product_button_request Details of the updated product button (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\ProductButtonResponse
     */
    public function putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId($line_item_id, $product_button_id, $product_button_request = null, string $contentType = self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        list($response) = $this->putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, $product_button_request, $contentType);
        return $response;
    }

    /**
     * Operation putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonRequest $product_button_request Details of the updated product button (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\ProductButtonResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdWithHttpInfo($line_item_id, $product_button_id, $product_button_request = null, string $contentType = self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $request = $this->putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $product_button_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\ProductButtonResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\ProductButtonResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\ProductButtonResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\ProductButtonResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonRequest $product_button_request Details of the updated product button (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsync($line_item_id, $product_button_id, $product_button_request = null, string $contentType = self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        return $this->putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, $product_button_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonRequest $product_button_request Details of the updated product button (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdAsyncWithHttpInfo($line_item_id, $product_button_id, $product_button_request = null, string $contentType = self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\ProductButtonResponse';
        $request = $this->putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $product_button_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  string $product_button_id Sequential id of the product button (required)
     * @param  \criteo\api\retailmedia\preview\Model\ProductButtonRequest $product_button_request Details of the updated product button (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonIdRequest($line_item_id, $product_button_id, $product_button_request = null, string $contentType = self::contentTypes['putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }

        // verify the required parameter 'product_button_id' is set
        if ($product_button_id === null || (is_array($product_button_id) && count($product_button_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_button_id when calling putApi202210ExternalLineItemProductButtonsByLineItemIdProductButtonId'
            );
        }



        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/product-buttons/{product-button-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }
        // path params
        if ($product_button_id !== null) {
            $resourcePath = str_replace(
                '{' . 'product-button-id' . '}',
                ObjectSerializer::toPathValue($product_button_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_button_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_button_request));
            } else {
                $httpBody = $product_button_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApi202301ExternalLineItemBidMultipliersByLineItemId
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersRequest $line_item_bid_multipliers_request line_item_bid_multipliers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse
     */
    public function putApi202301ExternalLineItemBidMultipliersByLineItemId($line_item_id, $line_item_bid_multipliers_request = null, string $contentType = self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        list($response) = $this->putApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo($line_item_id, $line_item_bid_multipliers_request, $contentType);
        return $response;
    }

    /**
     * Operation putApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersRequest $line_item_bid_multipliers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApi202301ExternalLineItemBidMultipliersByLineItemIdWithHttpInfo($line_item_id, $line_item_bid_multipliers_request = null, string $contentType = self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        $request = $this->putApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, $line_item_bid_multipliers_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApi202301ExternalLineItemBidMultipliersByLineItemIdAsync
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersRequest $line_item_bid_multipliers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202301ExternalLineItemBidMultipliersByLineItemIdAsync($line_item_id, $line_item_bid_multipliers_request = null, string $contentType = self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        return $this->putApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo($line_item_id, $line_item_bid_multipliers_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersRequest $line_item_bid_multipliers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApi202301ExternalLineItemBidMultipliersByLineItemIdAsyncWithHttpInfo($line_item_id, $line_item_bid_multipliers_request = null, string $contentType = self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\LineItemBidMultipliersResponse';
        $request = $this->putApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, $line_item_bid_multipliers_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApi202301ExternalLineItemBidMultipliersByLineItemId'
     *
     * @param  string $line_item_id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\LineItemBidMultipliersRequest $line_item_bid_multipliers_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApi202301ExternalLineItemBidMultipliersByLineItemIdRequest($line_item_id, $line_item_bid_multipliers_request = null, string $contentType = self::contentTypes['putApi202301ExternalLineItemBidMultipliersByLineItemId'][0])
    {

        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApi202301ExternalLineItemBidMultipliersByLineItemId'
            );
        }



        $resourcePath = '/preview/retail-media/line-items/{line-item-id}/bid-multipliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($line_item_bid_multipliers_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($line_item_bid_multipliers_request));
            } else {
                $httpBody = $line_item_bid_multipliers_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setKeywordBids
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1SetBidsModelRequest $retail_media_externalv1_set_bids_model_request Object containing a list of bid overrides for associated keywords (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setKeywordBids'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome
     */
    public function setKeywordBids($id, $retail_media_externalv1_set_bids_model_request = null, string $contentType = self::contentTypes['setKeywordBids'][0])
    {
        list($response) = $this->setKeywordBidsWithHttpInfo($id, $retail_media_externalv1_set_bids_model_request, $contentType);
        return $response;
    }

    /**
     * Operation setKeywordBidsWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1SetBidsModelRequest $retail_media_externalv1_set_bids_model_request Object containing a list of bid overrides for associated keywords (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setKeywordBids'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome, HTTP status code, HTTP response headers (array of strings)
     */
    public function setKeywordBidsWithHttpInfo($id, $retail_media_externalv1_set_bids_model_request = null, string $contentType = self::contentTypes['setKeywordBids'][0])
    {
        $request = $this->setKeywordBidsRequest($id, $retail_media_externalv1_set_bids_model_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setKeywordBidsAsync
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1SetBidsModelRequest $retail_media_externalv1_set_bids_model_request Object containing a list of bid overrides for associated keywords (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setKeywordBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setKeywordBidsAsync($id, $retail_media_externalv1_set_bids_model_request = null, string $contentType = self::contentTypes['setKeywordBids'][0])
    {
        return $this->setKeywordBidsAsyncWithHttpInfo($id, $retail_media_externalv1_set_bids_model_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setKeywordBidsAsyncWithHttpInfo
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1SetBidsModelRequest $retail_media_externalv1_set_bids_model_request Object containing a list of bid overrides for associated keywords (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setKeywordBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setKeywordBidsAsyncWithHttpInfo($id, $retail_media_externalv1_set_bids_model_request = null, string $contentType = self::contentTypes['setKeywordBids'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ResourceOutcome';
        $request = $this->setKeywordBidsRequest($id, $retail_media_externalv1_set_bids_model_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setKeywordBids'
     *
     * @param  string $id Long external id of the associated line item (required)
     * @param  \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1SetBidsModelRequest $retail_media_externalv1_set_bids_model_request Object containing a list of bid overrides for associated keywords (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setKeywordBids'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setKeywordBidsRequest($id, $retail_media_externalv1_set_bids_model_request = null, string $contentType = self::contentTypes['setKeywordBids'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling setKeywordBids'
            );
        }



        $resourcePath = '/preview/retail-media/line-items/{id}/keywords/set-bid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($retail_media_externalv1_set_bids_model_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($retail_media_externalv1_set_bids_model_request));
            } else {
                $httpBody = $retail_media_externalv1_set_bids_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitProposal
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitProposal'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse
     */
    public function submitProposal($id, string $contentType = self::contentTypes['submitProposal'][0])
    {
        list($response) = $this->submitProposalWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation submitProposalWithHttpInfo
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitProposal'] to see the possible values for this operation
     *
     * @throws \criteo\api\retailmedia\preview\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitProposalWithHttpInfo($id, string $contentType = self::contentTypes['submitProposal'][0])
    {
        $request = $this->submitProposalRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitProposalAsync
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitProposalAsync($id, string $contentType = self::contentTypes['submitProposal'][0])
    {
        return $this->submitProposalAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitProposalAsyncWithHttpInfo
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitProposalAsyncWithHttpInfo($id, string $contentType = self::contentTypes['submitProposal'][0])
    {
        $returnType = '\criteo\api\retailmedia\preview\Model\RetailMediaExternalv1ProposalStatusModelResponse';
        $request = $this->submitProposalRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitProposal'
     *
     * @param  string $id The external id of a line item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitProposal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitProposalRequest($id, string $contentType = self::contentTypes['submitProposal'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling submitProposal'
            );
        }


        $resourcePath = '/preview/retail-media/preferred-deal-line-items/{id}/proposal/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', 'text/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
