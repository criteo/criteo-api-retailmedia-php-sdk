<?php
/**
 * CampaignApi
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2021_07
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2021-07
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\v2021_07\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use criteo\api\retailmedia\v2021_07\ApiException;
use criteo\api\retailmedia\v2021_07\Configuration;
use criteo\api\retailmedia\v2021_07\HeaderSelector;
use criteo\api\retailmedia\v2021_07\ObjectSerializer;

/**
 * CampaignApi Class Doc Comment
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2021_07
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CampaignApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        list($response) = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign);
        return $response;
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        $request = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        return $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
        $request = $this->deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to remove campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfDeleteBalanceCampaign $json_api_data_request_of_delete_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_delete_balance_campaign = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling deleteApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/2021-07/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_of_delete_balance_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_of_delete_balance_campaign));
            } else {
                $httpBody = $json_api_data_request_of_delete_balance_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemId($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        list($response) = $this->deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);
        return $response;
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $request = $this->deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        return $this->deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling deleteApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_with_id_of_string_and_promoted_product)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_with_id_of_string_and_promoted_product));
            } else {
                $httpBody = $json_api_data_request_with_id_of_string_and_promoted_product;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteApiV2ExternalLineItemTargetingKeywordsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request keyword_target_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse
     */
    public function deleteApiV2ExternalLineItemTargetingKeywordsByLineItemId($line_item_id, $keyword_target_request = null)
    {
        list($response) = $this->deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id, $keyword_target_request);
        return $response;
    }

    /**
     * Operation deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id, $keyword_target_request = null)
    {
        $request = $this->deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync($line_item_id, $keyword_target_request = null)
    {
        return $this->deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
        $request = $this->deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteApiV2ExternalLineItemTargetingKeywordsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling deleteApiV2ExternalLineItemTargetingKeywordsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{line-item-id}/targeting/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($keyword_target_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($keyword_target_request));
            } else {
                $httpBody = $keyword_target_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountId
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance
     */
    public function getApiV1ExternalAccountBalancesByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBalancesByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdAsync
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBalancesByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBalancesByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBalance';
        $request = $this->getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBalancesByAccountId'
     *
     * @param  string $account_id The account to get balances for (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBalancesByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBalancesByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand
     */
    public function getApiV1ExternalAccountBrandsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountBrandsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountBrandsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfBrand';
        $request = $this->getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountBrandsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountBrandsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountBrandsByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/brands';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign
     */
    public function getApiV1ExternalAccountCampaignsByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfCampaign';
        $request = $this->getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer
     */
    public function getApiV1ExternalAccountRetailersByAccountId($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountRetailersByAccountIdWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsync($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountRetailersByAccountIdAsyncWithHttpInfo($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfRetailer';
        $request = $this->getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccountRetailersByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountRetailersByAccountIdRequest($account_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV1ExternalAccountRetailersByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/retailers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalAccounts
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount
     */
    public function getApiV1ExternalAccounts($limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalAccountsWithHttpInfo($limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalAccountsWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalAccountsWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalAccountsAsync
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsync($limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalAccountsAsyncWithHttpInfo
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalAccountsAsyncWithHttpInfo($limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfAccount';
        $request = $this->getApiV1ExternalAccountsRequest($limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalAccounts'
     *
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalAccountsRequest($limit_to_id = null, $page_index = null, $page_size = null)
    {

        $resourcePath = '/2021-07/retail-media/accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
        $request = $this->getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to get campaigns from (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling getApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/2021-07/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function getApiV1ExternalCampaignByCampaignId($campaign_id)
    {
        list($response) = $this->getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id)
    {
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsync($campaign_id)
    {
        return $this->getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->getApiV1ExternalCampaignByCampaignIdRequest($campaign_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCampaignByCampaignIdRequest($campaign_id)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getApiV1ExternalCatalogOutputByCatalogId($catalog_id)
    {
        $this->getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id);
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '';
        $request = $this->getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCatalogOutputByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCatalogOutputByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV1ExternalCatalogOutputByCatalogId'
            );
        }

        $resourcePath = '/2021-07/retail-media/catalogs/{catalogId}/output';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-json-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-json-stream', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogId
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function getApiV1ExternalCatalogStatusByCatalogId($catalog_id)
    {
        list($response) = $this->getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id);
        return $response;
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdWithHttpInfo($catalog_id)
    {
        $request = $this->getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdAsync
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdAsync($catalog_id)
    {
        return $this->getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdAsyncWithHttpInfo($catalog_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalCatalogStatusByCatalogId'
     *
     * @param  string $catalog_id A catalog ID returned from an account catalog request. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalCatalogStatusByCatalogIdRequest($catalog_id)
    {
        // verify the required parameter 'catalog_id' is set
        if ($catalog_id === null || (is_array($catalog_id) && count($catalog_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $catalog_id when calling getApiV1ExternalCatalogStatusByCatalogId'
            );
        }

        $resourcePath = '/2021-07/retail-media/catalogs/{catalogId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($catalog_id !== null) {
            $resourcePath = str_replace(
                '{' . 'catalogId' . '}',
                ObjectSerializer::toPathValue($catalog_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function getApiV1ExternalLineItemProductsByLineItemId($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse
     */
    public function getApiV2ExternalAccountLineItemsByAccountId($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdWithHttpInfo($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdAsync($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdAsyncWithHttpInfo($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemPagedListResponse';
        $request = $this->getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id, $limit_to_type, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalAccountLineItemsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  string[] $limit_to_campaign_id The campaign ids that you would like to limit your result set to (optional)
     * @param  string $limit_to_type The campaign types that you would like to limit your result set to (optional)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalAccountLineItemsByAccountIdRequest($account_id, $limit_to_campaign_id = null, $limit_to_type = null, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling getApiV2ExternalAccountLineItemsByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{account-id}/line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_campaign_id !== null) {
            if('form' === 'form' && is_array($limit_to_campaign_id)) {
                foreach($limit_to_campaign_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToCampaignId'] = $limit_to_campaign_id;
            }
        }
        // query params
        if ($limit_to_type !== null) {
            if('form' === 'form' && is_array($limit_to_type)) {
                foreach($limit_to_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToType'] = $limit_to_type;
            }
        }
        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'account-id' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse
     */
    public function getApiV2ExternalAuctionLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
        $request = $this->getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalAuctionLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalAuctionLineItemByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/auction-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignId($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemPagedListResponse';
        $request = $this->getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalCampaignAuctionLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV2ExternalCampaignAuctionLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalCampaignPreferredLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse
     */
    public function getApiV2ExternalCampaignPreferredLineItemsByCampaignId($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        list($response) = $this->getApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation getApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $request = $this->getApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsync($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        return $this->getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemPagedListResponse';
        $request = $this->getApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalCampaignPreferredLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  string[] $limit_to_id The ids that you would like to limit your result set to (optional)
     * @param  int $page_index The 0 indexed page index you would like to receive given the page size (optional)
     * @param  int $page_size The maximum number of items you would like to receive in this request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $limit_to_id = null, $page_index = null, $page_size = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getApiV2ExternalCampaignPreferredLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaign-id}/preferred-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit_to_id !== null) {
            if('form' === 'form' && is_array($limit_to_id)) {
                foreach($limit_to_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limitToId'] = $limit_to_id;
            }
        }
        // query params
        if ($page_index !== null) {
            if('form' === 'form' && is_array($page_index)) {
                foreach($page_index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageIndex'] = $page_index;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse
     */
    public function getApiV2ExternalLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\CommonLineItemResponse';
        $request = $this->getApiV2ExternalLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalLineItemByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalLineItemTargetingKeywordsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse
     */
    public function getApiV2ExternalLineItemTargetingKeywordsByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
        $request = $this->getApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalLineItemTargetingKeywordsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalLineItemTargetingKeywordsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{line-item-id}/targeting/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApiV2ExternalPreferredLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse
     */
    public function getApiV2ExternalPreferredLineItemByLineItemId($line_item_id)
    {
        list($response) = $this->getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id);
        return $response;
    }

    /**
     * Operation getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id)
    {
        $request = $this->getApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getApiV2ExternalPreferredLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalPreferredLineItemByLineItemIdAsync($line_item_id)
    {
        return $this->getApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
        $request = $this->getApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApiV2ExternalPreferredLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling getApiV2ExternalPreferredLineItemByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/preferred-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountId
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function postApiV1ExternalAccountCampaignsByAccountId($account_id, $external_post_campaign = null)
    {
        list($response) = $this->postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign);
        return $response;
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsync
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsync($account_id, $external_post_campaign = null)
    {
        return $this->postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdAsyncWithHttpInfo($account_id, $external_post_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalAccountCampaignsByAccountId'
     *
     * @param  string $account_id The given account id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPostCampaign $external_post_campaign The campaign settings to create a campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalAccountCampaignsByAccountIdRequest($account_id, $external_post_campaign = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalAccountCampaignsByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_post_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_post_campaign));
            } else {
                $httpBody = $external_post_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountId
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request json_api_request_of_catalog_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus
     */
    public function postApiV1ExternalAccountCatalogsByAccountId($account_id, $json_api_request_of_catalog_request = null)
    {
        list($response) = $this->postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request);
        return $response;
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdWithHttpInfo($account_id, $json_api_request_of_catalog_request = null)
    {
        $request = $this->postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdAsync
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdAsync($account_id, $json_api_request_of_catalog_request = null)
    {
        return $this->postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdAsyncWithHttpInfo($account_id, $json_api_request_of_catalog_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCatalogStatus';
        $request = $this->postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV1ExternalAccountCatalogsByAccountId'
     *
     * @param  string $account_id The account to request the catalog for. (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiRequestOfCatalogRequest $json_api_request_of_catalog_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV1ExternalAccountCatalogsByAccountIdRequest($account_id, $json_api_request_of_catalog_request = null)
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null || (is_array($account_id) && count($account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_id when calling postApiV1ExternalAccountCatalogsByAccountId'
            );
        }

        $resourcePath = '/2021-07/retail-media/accounts/{accountId}/catalogs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($account_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_request_of_catalog_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_request_of_catalog_request));
            } else {
                $httpBody = $json_api_request_of_catalog_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignId($campaign_id, $auction_line_item_create_model_request = null)
    {
        list($response) = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $auction_line_item_create_model_request);
        return $response;
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdWithHttpInfo($campaign_id, $auction_line_item_create_model_request = null)
    {
        $request = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsync($campaign_id, $auction_line_item_create_model_request = null)
    {
        return $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $auction_line_item_create_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $auction_line_item_create_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
        $request = $this->postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV2ExternalCampaignAuctionLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemCreateModelRequest $auction_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV2ExternalCampaignAuctionLineItemsByCampaignIdRequest($campaign_id, $auction_line_item_create_model_request = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postApiV2ExternalCampaignAuctionLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auction_line_item_create_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auction_line_item_create_model_request));
            } else {
                $httpBody = $auction_line_item_create_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApiV2ExternalCampaignPreferredLineItemsByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemCreateModelRequest $preferred_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse
     */
    public function postApiV2ExternalCampaignPreferredLineItemsByCampaignId($campaign_id, $preferred_line_item_create_model_request = null)
    {
        list($response) = $this->postApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $preferred_line_item_create_model_request);
        return $response;
    }

    /**
     * Operation postApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemCreateModelRequest $preferred_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApiV2ExternalCampaignPreferredLineItemsByCampaignIdWithHttpInfo($campaign_id, $preferred_line_item_create_model_request = null)
    {
        $request = $this->postApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemCreateModelRequest $preferred_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsync($campaign_id, $preferred_line_item_create_model_request = null)
    {
        return $this->postApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $preferred_line_item_create_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemCreateModelRequest $preferred_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApiV2ExternalCampaignPreferredLineItemsByCampaignIdAsyncWithHttpInfo($campaign_id, $preferred_line_item_create_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
        $request = $this->postApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApiV2ExternalCampaignPreferredLineItemsByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemCreateModelRequest $preferred_line_item_create_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApiV2ExternalCampaignPreferredLineItemsByCampaignIdRequest($campaign_id, $preferred_line_item_create_model_request = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling postApiV2ExternalCampaignPreferredLineItemsByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaign-id}/preferred-line-items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($preferred_line_item_create_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($preferred_line_item_create_model_request));
            } else {
                $httpBody = $preferred_line_item_create_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceId
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceId($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        list($response) = $this->putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign);
        return $response;
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        $request = $this->putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdAsync
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdAsync($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        return $this->putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdAsyncWithHttpInfo($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PageOfBalanceCampaign';
        $request = $this->putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalBalanceCampaignsByBalanceId'
     *
     * @param  string $balance_id The balance to add campaigns from (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestOfPutBalanceCampaign $json_api_data_request_of_put_balance_campaign The campaigns to append (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalBalanceCampaignsByBalanceIdRequest($balance_id, $json_api_data_request_of_put_balance_campaign = null)
    {
        // verify the required parameter 'balance_id' is set
        if ($balance_id === null || (is_array($balance_id) && count($balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $balance_id when calling putApiV1ExternalBalanceCampaignsByBalanceId'
            );
        }

        $resourcePath = '/2021-07/retail-media/balances/{balanceId}/campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'balanceId' . '}',
                ObjectSerializer::toPathValue($balance_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_of_put_balance_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_of_put_balance_campaign));
            } else {
                $httpBody = $json_api_data_request_of_put_balance_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignId
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign
     */
    public function putApiV1ExternalCampaignByCampaignId($campaign_id, $external_put_campaign = null)
    {
        list($response) = $this->putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign);
        return $response;
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalCampaignByCampaignIdWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsync
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsync($campaign_id, $external_put_campaign = null)
    {
        return $this->putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalCampaignByCampaignIdAsyncWithHttpInfo($campaign_id, $external_put_campaign = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiSingleResponseOfCampaign';
        $request = $this->putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalCampaignByCampaignId'
     *
     * @param  string $campaign_id The given campaign id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\ExternalPutCampaign $external_put_campaign The campaign settings to update that campaign with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalCampaignByCampaignIdRequest($campaign_id, $external_put_campaign = null)
    {
        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling putApiV1ExternalCampaignByCampaignId'
            );
        }

        $resourcePath = '/2021-07/retail-media/campaigns/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($external_put_campaign)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($external_put_campaign));
            } else {
                $httpBody = $external_put_campaign;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct
     */
    public function putApiV1ExternalLineItemProductsByLineItemId($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        list($response) = $this->putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);
        return $response;
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $request = $this->putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdAsync($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        return $this->putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdAsyncWithHttpInfo($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\JsonApiPageResponseOfStringAndPromotedProduct';
        $request = $this->putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV1ExternalLineItemProductsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\JsonApiDataRequestWithIdOfStringAndPromotedProduct $json_api_data_request_with_id_of_string_and_promoted_product the products to append to this line item (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV1ExternalLineItemProductsByLineItemIdRequest($line_item_id, $json_api_data_request_with_id_of_string_and_promoted_product = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV1ExternalLineItemProductsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{lineItemId}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lineItemId' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($json_api_data_request_with_id_of_string_and_promoted_product)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($json_api_data_request_with_id_of_string_and_promoted_product));
            } else {
                $httpBody = $json_api_data_request_with_id_of_string_and_promoted_product;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse
     */
    public function putApiV2ExternalAuctionLineItemByLineItemId($line_item_id, $auction_line_item_update_model_request = null)
    {
        list($response) = $this->putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id, $auction_line_item_update_model_request);
        return $response;
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdWithHttpInfo($line_item_id, $auction_line_item_update_model_request = null)
    {
        $request = $this->putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdAsync($line_item_id, $auction_line_item_update_model_request = null)
    {
        return $this->putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $auction_line_item_update_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $auction_line_item_update_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\AuctionLineItemResponse';
        $request = $this->putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV2ExternalAuctionLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\AuctionLineItemUpdateModelRequest $auction_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV2ExternalAuctionLineItemByLineItemIdRequest($line_item_id, $auction_line_item_update_model_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV2ExternalAuctionLineItemByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/auction-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($auction_line_item_update_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($auction_line_item_update_model_request));
            } else {
                $httpBody = $auction_line_item_update_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV2ExternalLineItemTargetingKeywordsByLineItemId
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request keyword_target_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse
     */
    public function putApiV2ExternalLineItemTargetingKeywordsByLineItemId($line_item_id, $keyword_target_request = null)
    {
        list($response) = $this->putApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id, $keyword_target_request);
        return $response;
    }

    /**
     * Operation putApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse|\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV2ExternalLineItemTargetingKeywordsByLineItemIdWithHttpInfo($line_item_id, $keyword_target_request = null)
    {
        $request = $this->putApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsync($line_item_id, $keyword_target_request = null)
    {
        return $this->putApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalLineItemTargetingKeywordsByLineItemIdAsyncWithHttpInfo($line_item_id, $keyword_target_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\KeywordTargetResponse';
        $request = $this->putApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV2ExternalLineItemTargetingKeywordsByLineItemId'
     *
     * @param  string $line_item_id The line item to interact with (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\KeywordTargetRequest $keyword_target_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV2ExternalLineItemTargetingKeywordsByLineItemIdRequest($line_item_id, $keyword_target_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV2ExternalLineItemTargetingKeywordsByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/line-items/{line-item-id}/targeting/keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($keyword_target_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($keyword_target_request));
            } else {
                $httpBody = $keyword_target_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemId
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse
     */
    public function putApiV2ExternalPreferredLineItemByLineItemId($line_item_id, $preferred_line_item_update_model_request = null)
    {
        list($response) = $this->putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id, $preferred_line_item_update_model_request);
        return $response;
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \criteo\api\retailmedia\v2021_07\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse|\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdWithHttpInfo($line_item_id, $preferred_line_item_update_model_request = null)
    {
        $request = $this->putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdAsync
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdAsync($line_item_id, $preferred_line_item_update_model_request = null)
    {
        return $this->putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $preferred_line_item_update_model_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdAsyncWithHttpInfo($line_item_id, $preferred_line_item_update_model_request = null)
    {
        $returnType = '\criteo\api\retailmedia\v2021_07\Model\PreferredLineItemResponse';
        $request = $this->putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putApiV2ExternalPreferredLineItemByLineItemId'
     *
     * @param  string $line_item_id The given line item id (required)
     * @param  \criteo\api\retailmedia\v2021_07\Model\PreferredLineItemUpdateModelRequest $preferred_line_item_update_model_request The line item settings to create a line item with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putApiV2ExternalPreferredLineItemByLineItemIdRequest($line_item_id, $preferred_line_item_update_model_request = null)
    {
        // verify the required parameter 'line_item_id' is set
        if ($line_item_id === null || (is_array($line_item_id) && count($line_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_item_id when calling putApiV2ExternalPreferredLineItemByLineItemId'
            );
        }

        $resourcePath = '/2021-07/retail-media/preferred-line-items/{line-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($line_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'line-item-id' . '}',
                ObjectSerializer::toPathValue($line_item_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($preferred_line_item_update_model_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($preferred_line_item_update_model_request));
            } else {
                $httpBody = $preferred_line_item_update_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
