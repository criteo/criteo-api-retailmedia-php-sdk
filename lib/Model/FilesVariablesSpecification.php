<?php
/**
 * FilesVariablesSpecification
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2022_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2022-10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\v2022_10\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\v2022_10\ObjectSerializer;

/**
 * FilesVariablesSpecification Class Doc Comment
 *
 * @category Class
 * @description Specification of a file variable
 * @package  criteo\api\retailmedia\v2022_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FilesVariablesSpecification implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FilesVariablesSpecification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'extensions' => 'string[]',
        'max_bytes' => 'int',
        'min_files' => 'int',
        'max_file' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'extensions' => null,
        'max_bytes' => 'int32',
        'min_files' => 'int32',
        'max_file' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'extensions' => 'extensions',
        'max_bytes' => 'maxBytes',
        'min_files' => 'minFiles',
        'max_file' => 'maxFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'extensions' => 'setExtensions',
        'max_bytes' => 'setMaxBytes',
        'min_files' => 'setMinFiles',
        'max_file' => 'setMaxFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'extensions' => 'getExtensions',
        'max_bytes' => 'getMaxBytes',
        'min_files' => 'getMinFiles',
        'max_file' => 'getMaxFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EXTENSIONS_UNKNOWN = 'Unknown';
    const EXTENSIONS_JPEG = 'Jpeg';
    const EXTENSIONS_PNG = 'Png';
    const EXTENSIONS_GIF = 'Gif';
    const EXTENSIONS_PDF = 'Pdf';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtensionsAllowableValues()
    {
        return [
            self::EXTENSIONS_UNKNOWN,
            self::EXTENSIONS_JPEG,
            self::EXTENSIONS_PNG,
            self::EXTENSIONS_GIF,
            self::EXTENSIONS_PDF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['extensions'] = $data['extensions'] ?? null;
        $this->container['max_bytes'] = $data['max_bytes'] ?? null;
        $this->container['min_files'] = $data['min_files'] ?? null;
        $this->container['max_file'] = $data['max_file'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['extensions'] === null) {
            $invalidProperties[] = "'extensions' can't be null";
        }
        if ($this->container['min_files'] === null) {
            $invalidProperties[] = "'min_files' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets extensions
     *
     * @return string[]
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param string[] $extensions The accepted file extensions
     *
     * @return self
     */
    public function setExtensions($extensions)
    {
        $allowedValues = $this->getExtensionsAllowableValues();
        if (array_diff($extensions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'extensions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets max_bytes
     *
     * @return int|null
     */
    public function getMaxBytes()
    {
        return $this->container['max_bytes'];
    }

    /**
     * Sets max_bytes
     *
     * @param int|null $max_bytes The maximum amount of bytes per file
     *
     * @return self
     */
    public function setMaxBytes($max_bytes)
    {
        $this->container['max_bytes'] = $max_bytes;

        return $this;
    }

    /**
     * Gets min_files
     *
     * @return int
     */
    public function getMinFiles()
    {
        return $this->container['min_files'];
    }

    /**
     * Sets min_files
     *
     * @param int $min_files The minimum amount of files requires
     *
     * @return self
     */
    public function setMinFiles($min_files)
    {
        $this->container['min_files'] = $min_files;

        return $this;
    }

    /**
     * Gets max_file
     *
     * @return int|null
     */
    public function getMaxFile()
    {
        return $this->container['max_file'];
    }

    /**
     * Sets max_file
     *
     * @param int|null $max_file The maximum amount of files required
     *
     * @return self
     */
    public function setMaxFile($max_file)
    {
        $this->container['max_file'] = $max_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


