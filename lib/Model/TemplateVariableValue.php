<?php
/**
 * TemplateVariableValue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2022_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2022-10
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\v2022_10\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\v2022_10\ObjectSerializer;

/**
 * TemplateVariableValue Class Doc Comment
 *
 * @category Class
 * @description A value for a variable in a creative template.
 * @package  criteo\api\retailmedia\v2022_10
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TemplateVariableValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TemplateVariableValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'text_variable_value' => '\criteo\api\retailmedia\v2022_10\Model\TextVariableValue',
        'choice_variable_value' => '\criteo\api\retailmedia\v2022_10\Model\ChoiceVariableValue',
        'color_variable_value' => '\criteo\api\retailmedia\v2022_10\Model\ColorVariableValue',
        'files_variable_value' => '\criteo\api\retailmedia\v2022_10\Model\FilesVariableValue',
        'hyperlink_variable_value' => '\criteo\api\retailmedia\v2022_10\Model\HyperlinkVariableValue'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'text_variable_value' => null,
        'choice_variable_value' => null,
        'color_variable_value' => null,
        'files_variable_value' => null,
        'hyperlink_variable_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'text_variable_value' => false,
		'choice_variable_value' => false,
		'color_variable_value' => false,
		'files_variable_value' => false,
		'hyperlink_variable_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'text_variable_value' => 'textVariableValue',
        'choice_variable_value' => 'choiceVariableValue',
        'color_variable_value' => 'colorVariableValue',
        'files_variable_value' => 'filesVariableValue',
        'hyperlink_variable_value' => 'hyperlinkVariableValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'text_variable_value' => 'setTextVariableValue',
        'choice_variable_value' => 'setChoiceVariableValue',
        'color_variable_value' => 'setColorVariableValue',
        'files_variable_value' => 'setFilesVariableValue',
        'hyperlink_variable_value' => 'setHyperlinkVariableValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'text_variable_value' => 'getTextVariableValue',
        'choice_variable_value' => 'getChoiceVariableValue',
        'color_variable_value' => 'getColorVariableValue',
        'files_variable_value' => 'getFilesVariableValue',
        'hyperlink_variable_value' => 'getHyperlinkVariableValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('text_variable_value', $data ?? [], null);
        $this->setIfExists('choice_variable_value', $data ?? [], null);
        $this->setIfExists('color_variable_value', $data ?? [], null);
        $this->setIfExists('files_variable_value', $data ?? [], null);
        $this->setIfExists('hyperlink_variable_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the template variable the value is applied to
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets text_variable_value
     *
     * @return \criteo\api\retailmedia\v2022_10\Model\TextVariableValue|null
     */
    public function getTextVariableValue()
    {
        return $this->container['text_variable_value'];
    }

    /**
     * Sets text_variable_value
     *
     * @param \criteo\api\retailmedia\v2022_10\Model\TextVariableValue|null $text_variable_value text_variable_value
     *
     * @return self
     */
    public function setTextVariableValue($text_variable_value)
    {
        if (is_null($text_variable_value)) {
            throw new \InvalidArgumentException('non-nullable text_variable_value cannot be null');
        }
        $this->container['text_variable_value'] = $text_variable_value;

        return $this;
    }

    /**
     * Gets choice_variable_value
     *
     * @return \criteo\api\retailmedia\v2022_10\Model\ChoiceVariableValue|null
     */
    public function getChoiceVariableValue()
    {
        return $this->container['choice_variable_value'];
    }

    /**
     * Sets choice_variable_value
     *
     * @param \criteo\api\retailmedia\v2022_10\Model\ChoiceVariableValue|null $choice_variable_value choice_variable_value
     *
     * @return self
     */
    public function setChoiceVariableValue($choice_variable_value)
    {
        if (is_null($choice_variable_value)) {
            throw new \InvalidArgumentException('non-nullable choice_variable_value cannot be null');
        }
        $this->container['choice_variable_value'] = $choice_variable_value;

        return $this;
    }

    /**
     * Gets color_variable_value
     *
     * @return \criteo\api\retailmedia\v2022_10\Model\ColorVariableValue|null
     */
    public function getColorVariableValue()
    {
        return $this->container['color_variable_value'];
    }

    /**
     * Sets color_variable_value
     *
     * @param \criteo\api\retailmedia\v2022_10\Model\ColorVariableValue|null $color_variable_value color_variable_value
     *
     * @return self
     */
    public function setColorVariableValue($color_variable_value)
    {
        if (is_null($color_variable_value)) {
            throw new \InvalidArgumentException('non-nullable color_variable_value cannot be null');
        }
        $this->container['color_variable_value'] = $color_variable_value;

        return $this;
    }

    /**
     * Gets files_variable_value
     *
     * @return \criteo\api\retailmedia\v2022_10\Model\FilesVariableValue|null
     */
    public function getFilesVariableValue()
    {
        return $this->container['files_variable_value'];
    }

    /**
     * Sets files_variable_value
     *
     * @param \criteo\api\retailmedia\v2022_10\Model\FilesVariableValue|null $files_variable_value files_variable_value
     *
     * @return self
     */
    public function setFilesVariableValue($files_variable_value)
    {
        if (is_null($files_variable_value)) {
            throw new \InvalidArgumentException('non-nullable files_variable_value cannot be null');
        }
        $this->container['files_variable_value'] = $files_variable_value;

        return $this;
    }

    /**
     * Gets hyperlink_variable_value
     *
     * @return \criteo\api\retailmedia\v2022_10\Model\HyperlinkVariableValue|null
     */
    public function getHyperlinkVariableValue()
    {
        return $this->container['hyperlink_variable_value'];
    }

    /**
     * Sets hyperlink_variable_value
     *
     * @param \criteo\api\retailmedia\v2022_10\Model\HyperlinkVariableValue|null $hyperlink_variable_value hyperlink_variable_value
     *
     * @return self
     */
    public function setHyperlinkVariableValue($hyperlink_variable_value)
    {
        if (is_null($hyperlink_variable_value)) {
            throw new \InvalidArgumentException('non-nullable hyperlink_variable_value cannot be null');
        }
        $this->container['hyperlink_variable_value'] = $hyperlink_variable_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


