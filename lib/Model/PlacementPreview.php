<?php
/**
 * PlacementPreview
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\preview\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\preview\ObjectSerializer;

/**
 * PlacementPreview Class Doc Comment
 *
 * @category Class
 * @description Ad Placement information on a page
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PlacementPreview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlacementPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'retailer_id' => 'string',
        'page_type' => 'string',
        'page_environment_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'retailer_id' => null,
        'page_type' => null,
        'page_environment_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'retailer_id' => 'retailerId',
        'page_type' => 'pageType',
        'page_environment_type' => 'pageEnvironmentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'retailer_id' => 'setRetailerId',
        'page_type' => 'setPageType',
        'page_environment_type' => 'setPageEnvironmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'retailer_id' => 'getRetailerId',
        'page_type' => 'getPageType',
        'page_environment_type' => 'getPageEnvironmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PAGE_TYPE_UNKNOWN = 'Unknown';
    const PAGE_TYPE_SEARCH = 'Search';
    const PAGE_TYPE_HOME = 'Home';
    const PAGE_TYPE_BROWSE = 'Browse';
    const PAGE_TYPE_CHECKOUT = 'Checkout';
    const PAGE_TYPE_CATEGORY = 'Category';
    const PAGE_TYPE_PRODUCT_DETAIL = 'ProductDetail';
    const PAGE_TYPE_CONFIRMATION = 'Confirmation';
    const PAGE_TYPE_MERCHANDISING = 'Merchandising';
    const PAGE_TYPE_DEALS = 'Deals';
    const PAGE_ENVIRONMENT_TYPE_UNKNOWN = 'Unknown';
    const PAGE_ENVIRONMENT_TYPE_WEB = 'Web';
    const PAGE_ENVIRONMENT_TYPE_MOBILE = 'Mobile';
    const PAGE_ENVIRONMENT_TYPE_APP = 'App';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageTypeAllowableValues()
    {
        return [
            self::PAGE_TYPE_UNKNOWN,
            self::PAGE_TYPE_SEARCH,
            self::PAGE_TYPE_HOME,
            self::PAGE_TYPE_BROWSE,
            self::PAGE_TYPE_CHECKOUT,
            self::PAGE_TYPE_CATEGORY,
            self::PAGE_TYPE_PRODUCT_DETAIL,
            self::PAGE_TYPE_CONFIRMATION,
            self::PAGE_TYPE_MERCHANDISING,
            self::PAGE_TYPE_DEALS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageEnvironmentTypeAllowableValues()
    {
        return [
            self::PAGE_ENVIRONMENT_TYPE_UNKNOWN,
            self::PAGE_ENVIRONMENT_TYPE_WEB,
            self::PAGE_ENVIRONMENT_TYPE_MOBILE,
            self::PAGE_ENVIRONMENT_TYPE_APP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['retailer_id'] = $data['retailer_id'] ?? null;
        $this->container['page_type'] = $data['page_type'] ?? null;
        $this->container['page_environment_type'] = $data['page_environment_type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['retailer_id'] === null) {
            $invalidProperties[] = "'retailer_id' can't be null";
        }
        if ($this->container['page_type'] === null) {
            $invalidProperties[] = "'page_type' can't be null";
        }
        $allowedValues = $this->getPageTypeAllowableValues();
        if (!is_null($this->container['page_type']) && !in_array($this->container['page_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'page_type', must be one of '%s'",
                $this->container['page_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['page_environment_type'] === null) {
            $invalidProperties[] = "'page_environment_type' can't be null";
        }
        $allowedValues = $this->getPageEnvironmentTypeAllowableValues();
        if (!is_null($this->container['page_environment_type']) && !in_array($this->container['page_environment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'page_environment_type', must be one of '%s'",
                $this->container['page_environment_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the placement
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets retailer_id
     *
     * @return string
     */
    public function getRetailerId()
    {
        return $this->container['retailer_id'];
    }

    /**
     * Sets retailer_id
     *
     * @param string $retailer_id Retailer Id
     *
     * @return self
     */
    public function setRetailerId($retailer_id)
    {
        $this->container['retailer_id'] = $retailer_id;

        return $this;
    }

    /**
     * Gets page_type
     *
     * @return string
     */
    public function getPageType()
    {
        return $this->container['page_type'];
    }

    /**
     * Sets page_type
     *
     * @param string $page_type Page Type
     *
     * @return self
     */
    public function setPageType($page_type)
    {
        $allowedValues = $this->getPageTypeAllowableValues();
        if (!in_array($page_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'page_type', must be one of '%s'",
                    $page_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['page_type'] = $page_type;

        return $this;
    }

    /**
     * Gets page_environment_type
     *
     * @return string
     */
    public function getPageEnvironmentType()
    {
        return $this->container['page_environment_type'];
    }

    /**
     * Sets page_environment_type
     *
     * @param string $page_environment_type Page Environment
     *
     * @return self
     */
    public function setPageEnvironmentType($page_environment_type)
    {
        $allowedValues = $this->getPageEnvironmentTypeAllowableValues();
        if (!in_array($page_environment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'page_environment_type', must be one of '%s'",
                    $page_environment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['page_environment_type'] = $page_environment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


