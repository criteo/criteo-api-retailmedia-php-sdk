<?php
/**
 * CampaignV202301
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\v2023_01
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: 2023-01
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\v2023_01\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\v2023_01\ObjectSerializer;

/**
 * CampaignV202301 Class Doc Comment
 *
 * @category Class
 * @description A Retail Media Campaign used to represent an advertiser&#39;s marketing objective
 * @package  criteo\api\retailmedia\v2023_01
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CampaignV202301 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignV202301';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'string',
        'promoted_brand_ids' => 'string[]',
        'budget_spent' => 'float',
        'budget_remaining' => 'float',
        'status' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'type' => 'string',
        'drawable_balance_ids' => 'string[]',
        'click_attribution_window' => 'string',
        'view_attribution_window' => 'string',
        'name' => 'string',
        'budget' => 'float',
        'monthly_pacing' => 'float',
        'daily_pacing' => 'float',
        'is_auto_daily_pacing' => 'bool',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'click_attribution_scope' => 'string',
        'view_attribution_scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'long-id',
        'promoted_brand_ids' => 'long-id',
        'budget_spent' => 'decimal',
        'budget_remaining' => 'decimal',
        'status' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'type' => null,
        'drawable_balance_ids' => 'long-id',
        'click_attribution_window' => null,
        'view_attribution_window' => null,
        'name' => null,
        'budget' => 'decimal',
        'monthly_pacing' => 'decimal',
        'daily_pacing' => 'decimal',
        'is_auto_daily_pacing' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'click_attribution_scope' => null,
        'view_attribution_scope' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'promoted_brand_ids' => 'promotedBrandIds',
        'budget_spent' => 'budgetSpent',
        'budget_remaining' => 'budgetRemaining',
        'status' => 'status',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'type' => 'type',
        'drawable_balance_ids' => 'drawableBalanceIds',
        'click_attribution_window' => 'clickAttributionWindow',
        'view_attribution_window' => 'viewAttributionWindow',
        'name' => 'name',
        'budget' => 'budget',
        'monthly_pacing' => 'monthlyPacing',
        'daily_pacing' => 'dailyPacing',
        'is_auto_daily_pacing' => 'isAutoDailyPacing',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'click_attribution_scope' => 'clickAttributionScope',
        'view_attribution_scope' => 'viewAttributionScope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'promoted_brand_ids' => 'setPromotedBrandIds',
        'budget_spent' => 'setBudgetSpent',
        'budget_remaining' => 'setBudgetRemaining',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'type' => 'setType',
        'drawable_balance_ids' => 'setDrawableBalanceIds',
        'click_attribution_window' => 'setClickAttributionWindow',
        'view_attribution_window' => 'setViewAttributionWindow',
        'name' => 'setName',
        'budget' => 'setBudget',
        'monthly_pacing' => 'setMonthlyPacing',
        'daily_pacing' => 'setDailyPacing',
        'is_auto_daily_pacing' => 'setIsAutoDailyPacing',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'click_attribution_scope' => 'setClickAttributionScope',
        'view_attribution_scope' => 'setViewAttributionScope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'promoted_brand_ids' => 'getPromotedBrandIds',
        'budget_spent' => 'getBudgetSpent',
        'budget_remaining' => 'getBudgetRemaining',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'type' => 'getType',
        'drawable_balance_ids' => 'getDrawableBalanceIds',
        'click_attribution_window' => 'getClickAttributionWindow',
        'view_attribution_window' => 'getViewAttributionWindow',
        'name' => 'getName',
        'budget' => 'getBudget',
        'monthly_pacing' => 'getMonthlyPacing',
        'daily_pacing' => 'getDailyPacing',
        'is_auto_daily_pacing' => 'getIsAutoDailyPacing',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'click_attribution_scope' => 'getClickAttributionScope',
        'view_attribution_scope' => 'getViewAttributionScope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_UNKNOWN = 'unknown';
    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_SCHEDULED = 'scheduled';
    const STATUS_ENDED = 'ended';
    const TYPE_UNKNOWN = 'unknown';
    const TYPE_AUCTION = 'auction';
    const TYPE_PREFERRED = 'preferred';
    const CLICK_ATTRIBUTION_WINDOW__7_D = '7D';
    const CLICK_ATTRIBUTION_WINDOW__14_D = '14D';
    const CLICK_ATTRIBUTION_WINDOW__30_D = '30D';
    const CLICK_ATTRIBUTION_WINDOW_UNKNOWN = 'unknown';
    const VIEW_ATTRIBUTION_WINDOW_NONE = 'None';
    const VIEW_ATTRIBUTION_WINDOW_UNKNOWN = 'Unknown';
    const VIEW_ATTRIBUTION_WINDOW_ONE_DAY = 'OneDay';
    const VIEW_ATTRIBUTION_WINDOW_SEVEN_DAYS = 'SevenDays';
    const VIEW_ATTRIBUTION_WINDOW_FOURTEEN_DAYS = 'FourteenDays';
    const VIEW_ATTRIBUTION_WINDOW_THIRTY_DAYS = 'ThirtyDays';
    const CLICK_ATTRIBUTION_SCOPE_UNKNOWN = 'unknown';
    const CLICK_ATTRIBUTION_SCOPE_SAME_SKU = 'sameSku';
    const CLICK_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY = 'sameSkuCategory';
    const CLICK_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY_BRAND = 'sameSkuCategoryBrand';
    const VIEW_ATTRIBUTION_SCOPE_UNKNOWN = 'unknown';
    const VIEW_ATTRIBUTION_SCOPE_SAME_SKU = 'sameSku';
    const VIEW_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY = 'sameSkuCategory';
    const VIEW_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY_BRAND = 'sameSkuCategoryBrand';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
            self::STATUS_SCHEDULED,
            self::STATUS_ENDED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_AUCTION,
            self::TYPE_PREFERRED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClickAttributionWindowAllowableValues()
    {
        return [
            self::CLICK_ATTRIBUTION_WINDOW__7_D,
            self::CLICK_ATTRIBUTION_WINDOW__14_D,
            self::CLICK_ATTRIBUTION_WINDOW__30_D,
            self::CLICK_ATTRIBUTION_WINDOW_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewAttributionWindowAllowableValues()
    {
        return [
            self::VIEW_ATTRIBUTION_WINDOW_NONE,
            self::VIEW_ATTRIBUTION_WINDOW_UNKNOWN,
            self::VIEW_ATTRIBUTION_WINDOW_ONE_DAY,
            self::VIEW_ATTRIBUTION_WINDOW_SEVEN_DAYS,
            self::VIEW_ATTRIBUTION_WINDOW_FOURTEEN_DAYS,
            self::VIEW_ATTRIBUTION_WINDOW_THIRTY_DAYS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClickAttributionScopeAllowableValues()
    {
        return [
            self::CLICK_ATTRIBUTION_SCOPE_UNKNOWN,
            self::CLICK_ATTRIBUTION_SCOPE_SAME_SKU,
            self::CLICK_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY,
            self::CLICK_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY_BRAND,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewAttributionScopeAllowableValues()
    {
        return [
            self::VIEW_ATTRIBUTION_SCOPE_UNKNOWN,
            self::VIEW_ATTRIBUTION_SCOPE_SAME_SKU,
            self::VIEW_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY,
            self::VIEW_ATTRIBUTION_SCOPE_SAME_SKU_CATEGORY_BRAND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['promoted_brand_ids'] = $data['promoted_brand_ids'] ?? null;
        $this->container['budget_spent'] = $data['budget_spent'] ?? null;
        $this->container['budget_remaining'] = $data['budget_remaining'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['type'] = $data['type'] ?? TYPE_AUCTION;
        $this->container['drawable_balance_ids'] = $data['drawable_balance_ids'] ?? null;
        $this->container['click_attribution_window'] = $data['click_attribution_window'] ?? CLICK_ATTRIBUTION_WINDOW__30_D;
        $this->container['view_attribution_window'] = $data['view_attribution_window'] ?? VIEW_ATTRIBUTION_WINDOW_NONE;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['budget'] = $data['budget'] ?? null;
        $this->container['monthly_pacing'] = $data['monthly_pacing'] ?? null;
        $this->container['daily_pacing'] = $data['daily_pacing'] ?? null;
        $this->container['is_auto_daily_pacing'] = $data['is_auto_daily_pacing'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['click_attribution_scope'] = $data['click_attribution_scope'] ?? null;
        $this->container['view_attribution_scope'] = $data['view_attribution_scope'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['promoted_brand_ids'] === null) {
            $invalidProperties[] = "'promoted_brand_ids' can't be null";
        }
        if ($this->container['budget_spent'] === null) {
            $invalidProperties[] = "'budget_spent' can't be null";
        }
        if ($this->container['budget_remaining'] === null) {
            $invalidProperties[] = "'budget_remaining' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClickAttributionWindowAllowableValues();
        if (!is_null($this->container['click_attribution_window']) && !in_array($this->container['click_attribution_window'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'click_attribution_window', must be one of '%s'",
                $this->container['click_attribution_window'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewAttributionWindowAllowableValues();
        if (!is_null($this->container['view_attribution_window']) && !in_array($this->container['view_attribution_window'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view_attribution_window', must be one of '%s'",
                $this->container['view_attribution_window'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_auto_daily_pacing'] === null) {
            $invalidProperties[] = "'is_auto_daily_pacing' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        $allowedValues = $this->getClickAttributionScopeAllowableValues();
        if (!is_null($this->container['click_attribution_scope']) && !in_array($this->container['click_attribution_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'click_attribution_scope', must be one of '%s'",
                $this->container['click_attribution_scope'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewAttributionScopeAllowableValues();
        if (!is_null($this->container['view_attribution_scope']) && !in_array($this->container['view_attribution_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view_attribution_scope', must be one of '%s'",
                $this->container['view_attribution_scope'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets promoted_brand_ids
     *
     * @return string[]
     */
    public function getPromotedBrandIds()
    {
        return $this->container['promoted_brand_ids'];
    }

    /**
     * Sets promoted_brand_ids
     *
     * @param string[] $promoted_brand_ids promoted_brand_ids
     *
     * @return self
     */
    public function setPromotedBrandIds($promoted_brand_ids)
    {
        $this->container['promoted_brand_ids'] = $promoted_brand_ids;

        return $this;
    }

    /**
     * Gets budget_spent
     *
     * @return float
     */
    public function getBudgetSpent()
    {
        return $this->container['budget_spent'];
    }

    /**
     * Sets budget_spent
     *
     * @param float $budget_spent budget_spent
     *
     * @return self
     */
    public function setBudgetSpent($budget_spent)
    {
        $this->container['budget_spent'] = $budget_spent;

        return $this;
    }

    /**
     * Gets budget_remaining
     *
     * @return float
     */
    public function getBudgetRemaining()
    {
        return $this->container['budget_remaining'];
    }

    /**
     * Sets budget_remaining
     *
     * @param float $budget_remaining budget_remaining
     *
     * @return self
     */
    public function setBudgetRemaining($budget_remaining)
    {
        $this->container['budget_remaining'] = $budget_remaining;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets drawable_balance_ids
     *
     * @return string[]|null
     */
    public function getDrawableBalanceIds()
    {
        return $this->container['drawable_balance_ids'];
    }

    /**
     * Sets drawable_balance_ids
     *
     * @param string[]|null $drawable_balance_ids drawable_balance_ids
     *
     * @return self
     */
    public function setDrawableBalanceIds($drawable_balance_ids)
    {
        $this->container['drawable_balance_ids'] = $drawable_balance_ids;

        return $this;
    }

    /**
     * Gets click_attribution_window
     *
     * @return string|null
     */
    public function getClickAttributionWindow()
    {
        return $this->container['click_attribution_window'];
    }

    /**
     * Sets click_attribution_window
     *
     * @param string|null $click_attribution_window click_attribution_window
     *
     * @return self
     */
    public function setClickAttributionWindow($click_attribution_window)
    {
        $allowedValues = $this->getClickAttributionWindowAllowableValues();
        if (!is_null($click_attribution_window) && !in_array($click_attribution_window, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'click_attribution_window', must be one of '%s'",
                    $click_attribution_window,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['click_attribution_window'] = $click_attribution_window;

        return $this;
    }

    /**
     * Gets view_attribution_window
     *
     * @return string|null
     */
    public function getViewAttributionWindow()
    {
        return $this->container['view_attribution_window'];
    }

    /**
     * Sets view_attribution_window
     *
     * @param string|null $view_attribution_window view_attribution_window
     *
     * @return self
     */
    public function setViewAttributionWindow($view_attribution_window)
    {
        $allowedValues = $this->getViewAttributionWindowAllowableValues();
        if (!is_null($view_attribution_window) && !in_array($view_attribution_window, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view_attribution_window', must be one of '%s'",
                    $view_attribution_window,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view_attribution_window'] = $view_attribution_window;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CampaignV202301., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CampaignV202301., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets budget
     *
     * @return float|null
     */
    public function getBudget()
    {
        return $this->container['budget'];
    }

    /**
     * Sets budget
     *
     * @param float|null $budget budget
     *
     * @return self
     */
    public function setBudget($budget)
    {
        $this->container['budget'] = $budget;

        return $this;
    }

    /**
     * Gets monthly_pacing
     *
     * @return float|null
     */
    public function getMonthlyPacing()
    {
        return $this->container['monthly_pacing'];
    }

    /**
     * Sets monthly_pacing
     *
     * @param float|null $monthly_pacing monthly_pacing
     *
     * @return self
     */
    public function setMonthlyPacing($monthly_pacing)
    {
        $this->container['monthly_pacing'] = $monthly_pacing;

        return $this;
    }

    /**
     * Gets daily_pacing
     *
     * @return float|null
     */
    public function getDailyPacing()
    {
        return $this->container['daily_pacing'];
    }

    /**
     * Sets daily_pacing
     *
     * @param float|null $daily_pacing daily_pacing
     *
     * @return self
     */
    public function setDailyPacing($daily_pacing)
    {
        $this->container['daily_pacing'] = $daily_pacing;

        return $this;
    }

    /**
     * Gets is_auto_daily_pacing
     *
     * @return bool
     */
    public function getIsAutoDailyPacing()
    {
        return $this->container['is_auto_daily_pacing'];
    }

    /**
     * Sets is_auto_daily_pacing
     *
     * @param bool $is_auto_daily_pacing is_auto_daily_pacing
     *
     * @return self
     */
    public function setIsAutoDailyPacing($is_auto_daily_pacing)
    {
        $this->container['is_auto_daily_pacing'] = $is_auto_daily_pacing;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets click_attribution_scope
     *
     * @return string|null
     */
    public function getClickAttributionScope()
    {
        return $this->container['click_attribution_scope'];
    }

    /**
     * Sets click_attribution_scope
     *
     * @param string|null $click_attribution_scope click_attribution_scope
     *
     * @return self
     */
    public function setClickAttributionScope($click_attribution_scope)
    {
        $allowedValues = $this->getClickAttributionScopeAllowableValues();
        if (!is_null($click_attribution_scope) && !in_array($click_attribution_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'click_attribution_scope', must be one of '%s'",
                    $click_attribution_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['click_attribution_scope'] = $click_attribution_scope;

        return $this;
    }

    /**
     * Gets view_attribution_scope
     *
     * @return string|null
     */
    public function getViewAttributionScope()
    {
        return $this->container['view_attribution_scope'];
    }

    /**
     * Sets view_attribution_scope
     *
     * @param string|null $view_attribution_scope view_attribution_scope
     *
     * @return self
     */
    public function setViewAttributionScope($view_attribution_scope)
    {
        $allowedValues = $this->getViewAttributionScopeAllowableValues();
        if (!is_null($view_attribution_scope) && !in_array($view_attribution_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view_attribution_scope', must be one of '%s'",
                    $view_attribution_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view_attribution_scope'] = $view_attribution_scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


