<?php
/**
 * CampaignReport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo API - RetailMedia
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\preview\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\preview\ObjectSerializer;

/**
 * CampaignReport Class Doc Comment
 *
 * @category Class
 * @description Campaign report body request
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignReport implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'report_type' => 'string',
        'campaign_ids' => 'string[]',
        'metrics' => 'string[]',
        'dimensions' => 'string[]',
        'account_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'timezone' => 'string',
        'click_attribution_window' => 'string',
        'view_attribution_window' => 'string',
        'campaign_type' => 'string',
        'sales_channel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'report_type' => null,
        'campaign_ids' => null,
        'metrics' => null,
        'dimensions' => null,
        'account_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'timezone' => null,
        'click_attribution_window' => null,
        'view_attribution_window' => null,
        'campaign_type' => null,
        'sales_channel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'report_type' => false,
		'campaign_ids' => false,
		'metrics' => false,
		'dimensions' => false,
		'account_id' => false,
		'start_date' => false,
		'end_date' => false,
		'timezone' => false,
		'click_attribution_window' => false,
		'view_attribution_window' => false,
		'campaign_type' => false,
		'sales_channel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'report_type' => 'reportType',
        'campaign_ids' => 'campaignIds',
        'metrics' => 'metrics',
        'dimensions' => 'dimensions',
        'account_id' => 'accountId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'timezone' => 'timezone',
        'click_attribution_window' => 'clickAttributionWindow',
        'view_attribution_window' => 'viewAttributionWindow',
        'campaign_type' => 'campaignType',
        'sales_channel' => 'salesChannel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'report_type' => 'setReportType',
        'campaign_ids' => 'setCampaignIds',
        'metrics' => 'setMetrics',
        'dimensions' => 'setDimensions',
        'account_id' => 'setAccountId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'timezone' => 'setTimezone',
        'click_attribution_window' => 'setClickAttributionWindow',
        'view_attribution_window' => 'setViewAttributionWindow',
        'campaign_type' => 'setCampaignType',
        'sales_channel' => 'setSalesChannel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'report_type' => 'getReportType',
        'campaign_ids' => 'getCampaignIds',
        'metrics' => 'getMetrics',
        'dimensions' => 'getDimensions',
        'account_id' => 'getAccountId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'timezone' => 'getTimezone',
        'click_attribution_window' => 'getClickAttributionWindow',
        'view_attribution_window' => 'getViewAttributionWindow',
        'campaign_type' => 'getCampaignType',
        'sales_channel' => 'getSalesChannel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const REPORT_TYPE_SUMMARY = 'summary';
    public const REPORT_TYPE_PAGE_TYPE = 'pageType';
    public const REPORT_TYPE_KEYWORD = 'keyword';
    public const REPORT_TYPE_PRODUCT_CATEGORY = 'productCategory';
    public const REPORT_TYPE_PRODUCT = 'product';
    public const METRICS_IMPRESSIONS = 'impressions';
    public const METRICS_CLICKS = 'clicks';
    public const METRICS_SPEND = 'spend';
    public const METRICS_ATTRIBUTED_SALES = 'attributedSales';
    public const METRICS_ATTRIBUTED_UNITS = 'attributedUnits';
    public const METRICS_ATTRIBUTED_ORDERS = 'attributedOrders';
    public const METRICS_CTR = 'ctr';
    public const METRICS_CPC = 'cpc';
    public const METRICS_CPO = 'cpo';
    public const METRICS_CPM = 'cpm';
    public const METRICS_ROAS = 'roas';
    public const METRICS_UNIQUE_VISITORS = 'uniqueVisitors';
    public const METRICS_FREQUENCY = 'frequency';
    public const DIMENSIONS_DATE = 'date';
    public const DIMENSIONS_CAMPAIGN_ID = 'campaignId';
    public const DIMENSIONS_CAMPAIGN_NAME = 'campaignName';
    public const DIMENSIONS_CAMPAIGN_TYPE_NAME = 'campaignTypeName';
    public const DIMENSIONS_ADV_PRODUCT_CATEGORY = 'advProductCategory';
    public const DIMENSIONS_ADV_PRODUCT_ID = 'advProductId';
    public const DIMENSIONS_ADV_PRODUCT_NAME = 'advProductName';
    public const DIMENSIONS_BRAND_ID = 'brandId';
    public const DIMENSIONS_BRAND_NAME = 'brandName';
    public const DIMENSIONS_PAGE_TYPE_NAME = 'pageTypeName';
    public const DIMENSIONS_KEYWORD = 'keyword';
    public const DIMENSIONS_SALES_CHANNEL = 'salesChannel';
    public const CLICK_ATTRIBUTION_WINDOW__7_D = '7D';
    public const CLICK_ATTRIBUTION_WINDOW__14_D = '14D';
    public const CLICK_ATTRIBUTION_WINDOW__30_D = '30D';
    public const VIEW_ATTRIBUTION_WINDOW__1_D = '1D';
    public const VIEW_ATTRIBUTION_WINDOW__7_D = '7D';
    public const VIEW_ATTRIBUTION_WINDOW__14_D = '14D';
    public const VIEW_ATTRIBUTION_WINDOW__30_D = '30D';
    public const VIEW_ATTRIBUTION_WINDOW_NONE = 'none';
    public const CAMPAIGN_TYPE_SPONSORED_PRODUCTS = 'sponsoredProducts';
    public const CAMPAIGN_TYPE_ON_SITE_DISPLAYS = 'onSiteDisplays';
    public const SALES_CHANNEL_OFFLINE = 'offline';
    public const SALES_CHANNEL_ONLINE = 'online';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportTypeAllowableValues()
    {
        return [
            self::REPORT_TYPE_SUMMARY,
            self::REPORT_TYPE_PAGE_TYPE,
            self::REPORT_TYPE_KEYWORD,
            self::REPORT_TYPE_PRODUCT_CATEGORY,
            self::REPORT_TYPE_PRODUCT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMetricsAllowableValues()
    {
        return [
            self::METRICS_IMPRESSIONS,
            self::METRICS_CLICKS,
            self::METRICS_SPEND,
            self::METRICS_ATTRIBUTED_SALES,
            self::METRICS_ATTRIBUTED_UNITS,
            self::METRICS_ATTRIBUTED_ORDERS,
            self::METRICS_CTR,
            self::METRICS_CPC,
            self::METRICS_CPO,
            self::METRICS_CPM,
            self::METRICS_ROAS,
            self::METRICS_UNIQUE_VISITORS,
            self::METRICS_FREQUENCY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDimensionsAllowableValues()
    {
        return [
            self::DIMENSIONS_DATE,
            self::DIMENSIONS_CAMPAIGN_ID,
            self::DIMENSIONS_CAMPAIGN_NAME,
            self::DIMENSIONS_CAMPAIGN_TYPE_NAME,
            self::DIMENSIONS_ADV_PRODUCT_CATEGORY,
            self::DIMENSIONS_ADV_PRODUCT_ID,
            self::DIMENSIONS_ADV_PRODUCT_NAME,
            self::DIMENSIONS_BRAND_ID,
            self::DIMENSIONS_BRAND_NAME,
            self::DIMENSIONS_PAGE_TYPE_NAME,
            self::DIMENSIONS_KEYWORD,
            self::DIMENSIONS_SALES_CHANNEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClickAttributionWindowAllowableValues()
    {
        return [
            self::CLICK_ATTRIBUTION_WINDOW__7_D,
            self::CLICK_ATTRIBUTION_WINDOW__14_D,
            self::CLICK_ATTRIBUTION_WINDOW__30_D,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getViewAttributionWindowAllowableValues()
    {
        return [
            self::VIEW_ATTRIBUTION_WINDOW__1_D,
            self::VIEW_ATTRIBUTION_WINDOW__7_D,
            self::VIEW_ATTRIBUTION_WINDOW__14_D,
            self::VIEW_ATTRIBUTION_WINDOW__30_D,
            self::VIEW_ATTRIBUTION_WINDOW_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCampaignTypeAllowableValues()
    {
        return [
            self::CAMPAIGN_TYPE_SPONSORED_PRODUCTS,
            self::CAMPAIGN_TYPE_ON_SITE_DISPLAYS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalesChannelAllowableValues()
    {
        return [
            self::SALES_CHANNEL_OFFLINE,
            self::SALES_CHANNEL_ONLINE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('report_type', $data ?? [], null);
        $this->setIfExists('campaign_ids', $data ?? [], null);
        $this->setIfExists('metrics', $data ?? [], null);
        $this->setIfExists('dimensions', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], 'UTC');
        $this->setIfExists('click_attribution_window', $data ?? [], '7D');
        $this->setIfExists('view_attribution_window', $data ?? [], 'none');
        $this->setIfExists('campaign_type', $data ?? [], null);
        $this->setIfExists('sales_channel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReportTypeAllowableValues();
        if (!is_null($this->container['report_type']) && !in_array($this->container['report_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'report_type', must be one of '%s'",
                $this->container['report_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['end_date'] === null) {
            $invalidProperties[] = "'end_date' can't be null";
        }
        $allowedValues = $this->getClickAttributionWindowAllowableValues();
        if (!is_null($this->container['click_attribution_window']) && !in_array($this->container['click_attribution_window'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'click_attribution_window', must be one of '%s'",
                $this->container['click_attribution_window'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getViewAttributionWindowAllowableValues();
        if (!is_null($this->container['view_attribution_window']) && !in_array($this->container['view_attribution_window'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'view_attribution_window', must be one of '%s'",
                $this->container['view_attribution_window'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!is_null($this->container['campaign_type']) && !in_array($this->container['campaign_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'campaign_type', must be one of '%s'",
                $this->container['campaign_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSalesChannelAllowableValues();
        if (!is_null($this->container['sales_channel']) && !in_array($this->container['sales_channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sales_channel', must be one of '%s'",
                $this->container['sales_channel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        if (is_null($report_type)) {
            throw new \InvalidArgumentException('non-nullable report_type cannot be null');
        }
        $allowedValues = $this->getReportTypeAllowableValues();
        if (!in_array($report_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'report_type', must be one of '%s'",
                    $report_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets campaign_ids
     *
     * @return string[]|null
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     *
     * @param string[]|null $campaign_ids List of campaign Ids to filter
     *
     * @return self
     */
    public function setCampaignIds($campaign_ids)
    {
        if (is_null($campaign_ids)) {
            throw new \InvalidArgumentException('non-nullable campaign_ids cannot be null');
        }
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets metrics
     *
     * @return string[]|null
     */
    public function getMetrics()
    {
        return $this->container['metrics'];
    }

    /**
     * Sets metrics
     *
     * @param string[]|null $metrics List of Metrics to report on
     *
     * @return self
     */
    public function setMetrics($metrics)
    {
        if (is_null($metrics)) {
            throw new \InvalidArgumentException('non-nullable metrics cannot be null');
        }
        $allowedValues = $this->getMetricsAllowableValues();
        if (array_diff($metrics, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'metrics', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['metrics'] = $metrics;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return string[]|null
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param string[]|null $dimensions List of dimensions to report on
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            throw new \InvalidArgumentException('non-nullable dimensions cannot be null');
        }
        $allowedValues = $this->getDimensionsAllowableValues();
        if (array_diff($dimensions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dimensions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id Account id to report on
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End Date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Time zone : see criteo developer portal for supported time zones
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets click_attribution_window
     *
     * @return string|null
     */
    public function getClickAttributionWindow()
    {
        return $this->container['click_attribution_window'];
    }

    /**
     * Sets click_attribution_window
     *
     * @param string|null $click_attribution_window Click Attribution Window
     *
     * @return self
     */
    public function setClickAttributionWindow($click_attribution_window)
    {
        if (is_null($click_attribution_window)) {
            throw new \InvalidArgumentException('non-nullable click_attribution_window cannot be null');
        }
        $allowedValues = $this->getClickAttributionWindowAllowableValues();
        if (!in_array($click_attribution_window, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'click_attribution_window', must be one of '%s'",
                    $click_attribution_window,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['click_attribution_window'] = $click_attribution_window;

        return $this;
    }

    /**
     * Gets view_attribution_window
     *
     * @return string|null
     */
    public function getViewAttributionWindow()
    {
        return $this->container['view_attribution_window'];
    }

    /**
     * Sets view_attribution_window
     *
     * @param string|null $view_attribution_window View Attribution window
     *
     * @return self
     */
    public function setViewAttributionWindow($view_attribution_window)
    {
        if (is_null($view_attribution_window)) {
            throw new \InvalidArgumentException('non-nullable view_attribution_window cannot be null');
        }
        $allowedValues = $this->getViewAttributionWindowAllowableValues();
        if (!in_array($view_attribution_window, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'view_attribution_window', must be one of '%s'",
                    $view_attribution_window,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['view_attribution_window'] = $view_attribution_window;

        return $this;
    }

    /**
     * Gets campaign_type
     *
     * @return string|null
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param string|null $campaign_type Filter the type of campaign to report on
     *
     * @return self
     */
    public function setCampaignType($campaign_type)
    {
        if (is_null($campaign_type)) {
            throw new \InvalidArgumentException('non-nullable campaign_type cannot be null');
        }
        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!in_array($campaign_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'campaign_type', must be one of '%s'",
                    $campaign_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return string|null
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param string|null $sales_channel Filter on the channel of sales
     *
     * @return self
     */
    public function setSalesChannel($sales_channel)
    {
        if (is_null($sales_channel)) {
            throw new \InvalidArgumentException('non-nullable sales_channel cannot be null');
        }
        $allowedValues = $this->getSalesChannelAllowableValues();
        if (!in_array($sales_channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sales_channel', must be one of '%s'",
                    $sales_channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


