<?php
/**
 * Creative202210
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Criteo API
 *
 * Criteo publicly exposed API
 *
 * The version of the OpenAPI document: Preview
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace criteo\api\retailmedia\preview\Model;

use \ArrayAccess;
use \criteo\api\retailmedia\preview\ObjectSerializer;

/**
 * Creative202210 Class Doc Comment
 *
 * @category Class
 * @description A creative entity
 * @package  criteo\api\retailmedia\preview
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Creative202210 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Creative202210';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => 'string',
        'brand_id' => 'int',
        'retailer_id' => 'int',
        'template_id' => 'int',
        'template_name' => 'string',
        'format_id' => 'int',
        'associated_line_item_ids' => 'string[]',
        'updated_at' => '\DateTime',
        'creative_format_type' => 'string',
        'environments' => '\criteo\api\retailmedia\preview\Model\PageTypeEnvironment[]',
        'template_variable_values' => '\criteo\api\retailmedia\preview\Model\TemplateVariableValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'brand_id' => 'int64',
        'retailer_id' => 'int32',
        'template_id' => 'int32',
        'template_name' => null,
        'format_id' => 'int32',
        'associated_line_item_ids' => null,
        'updated_at' => 'date-time',
        'creative_format_type' => null,
        'environments' => null,
        'template_variable_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'brand_id' => 'brandId',
        'retailer_id' => 'retailerId',
        'template_id' => 'templateId',
        'template_name' => 'templateName',
        'format_id' => 'formatId',
        'associated_line_item_ids' => 'associatedLineItemIds',
        'updated_at' => 'updatedAt',
        'creative_format_type' => 'creativeFormatType',
        'environments' => 'environments',
        'template_variable_values' => 'templateVariableValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'brand_id' => 'setBrandId',
        'retailer_id' => 'setRetailerId',
        'template_id' => 'setTemplateId',
        'template_name' => 'setTemplateName',
        'format_id' => 'setFormatId',
        'associated_line_item_ids' => 'setAssociatedLineItemIds',
        'updated_at' => 'setUpdatedAt',
        'creative_format_type' => 'setCreativeFormatType',
        'environments' => 'setEnvironments',
        'template_variable_values' => 'setTemplateVariableValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'brand_id' => 'getBrandId',
        'retailer_id' => 'getRetailerId',
        'template_id' => 'getTemplateId',
        'template_name' => 'getTemplateName',
        'format_id' => 'getFormatId',
        'associated_line_item_ids' => 'getAssociatedLineItemIds',
        'updated_at' => 'getUpdatedAt',
        'creative_format_type' => 'getCreativeFormatType',
        'environments' => 'getEnvironments',
        'template_variable_values' => 'getTemplateVariableValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_READY = 'Ready';
    const STATUS_IN_USE = 'In_Use';
    const STATUS_ARCHIVED = 'Archived';
    const STATUS_DELETED = 'Deleted';
    const CREATIVE_FORMAT_TYPE_UNKNOWN = 'Unknown';
    const CREATIVE_FORMAT_TYPE_FLAG_SHIP = 'FlagShip';
    const CREATIVE_FORMAT_TYPE_SHOWCASE = 'Showcase';
    const CREATIVE_FORMAT_TYPE_SPONSORED_PRODUCTS = 'SponsoredProducts';
    const CREATIVE_FORMAT_TYPE_BUTTERFLY = 'Butterfly';
    const CREATIVE_FORMAT_TYPE_BUNDLE_BOOST = 'BundleBoost';
    const CREATIVE_FORMAT_TYPE_IAB = 'IAB';
    const CREATIVE_FORMAT_TYPE_CUSTOM = 'CUSTOM';
    const CREATIVE_FORMAT_TYPE_DISPLAY_PANEL = 'DisplayPanel';
    const CREATIVE_FORMAT_TYPE_DIGITAL_SHELF_TALKER = 'DigitalShelfTalker';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_READY,
            self::STATUS_IN_USE,
            self::STATUS_ARCHIVED,
            self::STATUS_DELETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreativeFormatTypeAllowableValues()
    {
        return [
            self::CREATIVE_FORMAT_TYPE_UNKNOWN,
            self::CREATIVE_FORMAT_TYPE_FLAG_SHIP,
            self::CREATIVE_FORMAT_TYPE_SHOWCASE,
            self::CREATIVE_FORMAT_TYPE_SPONSORED_PRODUCTS,
            self::CREATIVE_FORMAT_TYPE_BUTTERFLY,
            self::CREATIVE_FORMAT_TYPE_BUNDLE_BOOST,
            self::CREATIVE_FORMAT_TYPE_IAB,
            self::CREATIVE_FORMAT_TYPE_CUSTOM,
            self::CREATIVE_FORMAT_TYPE_DISPLAY_PANEL,
            self::CREATIVE_FORMAT_TYPE_DIGITAL_SHELF_TALKER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['brand_id'] = $data['brand_id'] ?? null;
        $this->container['retailer_id'] = $data['retailer_id'] ?? null;
        $this->container['template_id'] = $data['template_id'] ?? null;
        $this->container['template_name'] = $data['template_name'] ?? null;
        $this->container['format_id'] = $data['format_id'] ?? null;
        $this->container['associated_line_item_ids'] = $data['associated_line_item_ids'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['creative_format_type'] = $data['creative_format_type'] ?? null;
        $this->container['environments'] = $data['environments'] ?? null;
        $this->container['template_variable_values'] = $data['template_variable_values'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['retailer_id'] === null) {
            $invalidProperties[] = "'retailer_id' can't be null";
        }
        if ($this->container['template_id'] === null) {
            $invalidProperties[] = "'template_id' can't be null";
        }
        if ($this->container['template_name'] === null) {
            $invalidProperties[] = "'template_name' can't be null";
        }
        if ($this->container['format_id'] === null) {
            $invalidProperties[] = "'format_id' can't be null";
        }
        if ($this->container['creative_format_type'] === null) {
            $invalidProperties[] = "'creative_format_type' can't be null";
        }
        $allowedValues = $this->getCreativeFormatTypeAllowableValues();
        if (!is_null($this->container['creative_format_type']) && !in_array($this->container['creative_format_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'creative_format_type', must be one of '%s'",
                $this->container['creative_format_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['environments'] === null) {
            $invalidProperties[] = "'environments' can't be null";
        }
        if ($this->container['template_variable_values'] === null) {
            $invalidProperties[] = "'template_variable_values' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Creative Status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return int|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param int|null $brand_id Brand Id
     *
     * @return self
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets retailer_id
     *
     * @return int
     */
    public function getRetailerId()
    {
        return $this->container['retailer_id'];
    }

    /**
     * Sets retailer_id
     *
     * @param int $retailer_id Retailer Id
     *
     * @return self
     */
    public function setRetailerId($retailer_id)
    {
        $this->container['retailer_id'] = $retailer_id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id Template Id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Template Name
     *
     * @return self
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets format_id
     *
     * @return int
     */
    public function getFormatId()
    {
        return $this->container['format_id'];
    }

    /**
     * Sets format_id
     *
     * @param int $format_id Format Id
     *
     * @return self
     */
    public function setFormatId($format_id)
    {
        $this->container['format_id'] = $format_id;

        return $this;
    }

    /**
     * Gets associated_line_item_ids
     *
     * @return string[]|null
     */
    public function getAssociatedLineItemIds()
    {
        return $this->container['associated_line_item_ids'];
    }

    /**
     * Sets associated_line_item_ids
     *
     * @param string[]|null $associated_line_item_ids Associated Line Item Ids
     *
     * @return self
     */
    public function setAssociatedLineItemIds($associated_line_item_ids)
    {
        $this->container['associated_line_item_ids'] = $associated_line_item_ids;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Updated at time
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets creative_format_type
     *
     * @return string
     */
    public function getCreativeFormatType()
    {
        return $this->container['creative_format_type'];
    }

    /**
     * Sets creative_format_type
     *
     * @param string $creative_format_type Creative format type
     *
     * @return self
     */
    public function setCreativeFormatType($creative_format_type)
    {
        $allowedValues = $this->getCreativeFormatTypeAllowableValues();
        if (!in_array($creative_format_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'creative_format_type', must be one of '%s'",
                    $creative_format_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['creative_format_type'] = $creative_format_type;

        return $this;
    }

    /**
     * Gets environments
     *
     * @return \criteo\api\retailmedia\preview\Model\PageTypeEnvironment[]
     */
    public function getEnvironments()
    {
        return $this->container['environments'];
    }

    /**
     * Sets environments
     *
     * @param \criteo\api\retailmedia\preview\Model\PageTypeEnvironment[] $environments Environment type (e.g. mobile, web, app)
     *
     * @return self
     */
    public function setEnvironments($environments)
    {
        $this->container['environments'] = $environments;

        return $this;
    }

    /**
     * Gets template_variable_values
     *
     * @return \criteo\api\retailmedia\preview\Model\TemplateVariableValue[]
     */
    public function getTemplateVariableValues()
    {
        return $this->container['template_variable_values'];
    }

    /**
     * Sets template_variable_values
     *
     * @param \criteo\api\retailmedia\preview\Model\TemplateVariableValue[] $template_variable_values The template chosen values
     *
     * @return self
     */
    public function setTemplateVariableValues($template_variable_values)
    {
        $this->container['template_variable_values'] = $template_variable_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


